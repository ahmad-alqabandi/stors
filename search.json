[{"path":"https://ahmad-alqabandi.github.io/stors/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 stors authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/articles/Sampling_Built_in_distributions.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Sampling from Built-in Distributions using stors","text":"stors package provides efficient sampling uni- multimodal distributions using Rejection Sampling techniques. built-distributions, STORS offers optimized sampling functions leverage pre-constructed proposals maximize sampling speed. vignette, focus use stors package sample built-distributions, demonstrating simplicity efficiency package’s built-functions. sample built-distribution, proposal distribution pre-optimized using 4091 steps package loaded first time. optimization process constructs proposal stores internal R data directory. proposal cached memory efficient sampling whenever needed. can also visualize proposal data using function better understand structure. ’s example optimizing proposal Normal distribution (note: process performed automatically package installed loaded first time):  optimized proposal ready, sampling Normal distribution specific straightforward using function. hand, users can optimize proposal specific Normal distribution calling passing desired arguments. case, unique proposal optimized cached memory. sample custom proposal, user can use function simply specifying sample size.  sample truncated Normal distribution, users need optimize either scalable proposal custom proposal specify truncation bounds using (lower bound) (upper bound) arguments.   process can applied custom proposal. custom proposal can truncated used sampling following example:  functions optimize proposal also return detailed list describing properties optimized proposal. list provides insights proposal’s structure characteristics. can use base function view details function visualize proposal.  cases proposal dense difficult visualize entirety, can focus specific region using function parameters. parameters allow set limits x-axis, making easier zoom areas interest within proposal.   functionalists proposal_optimizers subsequent visualization tools provide users -depth insights characteristics generated proposal, enabling understand fine-tune sampling process. user satisfied automatically optimized proposal, proposal_optimizers functions offers several arguments customization. One argument target_sample_size, defaults 1000. user wishes optimize proposal significantly larger smaller sample sizes, argument can altered. Another important argument pre-acceptance threshold theta, essentially ratio lower upper linear bounds step. typically set small number close zero. reason cost rejecting samples, even heavy-tailed distributions, usually less cost using alternative exact sampling methods (like Inverse Transform) dense proposals, probability hitting inefficient steps low. However, large sample sizes (e.g., 10^9), inefficient steps might hit frequently, leading increase sampling time due lower efficiency. cases, user can set higher pre-acceptance threshold using theta parameter. users less familiar target distribution, want focus specific range distribution, proposal_range argument can used. parameter limits step construction specified range x-axis, offering control proposal structure.    addition target_sample_size, theta, proposal_range parameters, users flexibility directly control number steps proposal. can particularly useful users specific requirements preferences granularity proposal. specify number steps, steps argument can passed proposal_optimizer function. setting steps parameter, users can determine resolution proposal, can impact balance computational efficiency granularity sampling. higher number steps typically provides detailed proposal, potentially leading precise sampling, cost increased memory usage possibly longer computation times.   user can also create symmetric proposal built-distributions setting argument value around target density symmetric. Example: Creating Symmetric Proposal Standard Normal Distribution example, create symmetric proposal standard Normal distribution. , first delete previously constructed non-symmetric proposals (scaled custom) using function.  Sampling Truncated Distributions One standout features STORS ability sample efficiently truncated distributions. sample truncated distribution, user simply needs specify upper lower truncation bounds using (lower bound) (upper bound) arguments function. Example: Sampling Truncated Standard Normal Distribution example, demonstrate sample truncated standard Normal distribution truncation bounds .  many built-functions stors, list shows available functions can used directly user optimizing proposals: built-distribution, corresponding proposal distribution optimizer can invoked using format . function optimizes proposal specified distribution, enabling efficient sampling.","code":"library(stors)  # Optimize a proposal for the Normal distribution with 4091 steps proposal <- srnorm_optimize(steps = 4091)  # Visualize the optimized proposal plot(proposal) # Generating 10 samples from the standard Normal distribution standard_normal_samples <- srnorm(10, mean = 2, sd = 1) print(standard_normal_samples) #>  [1]  0.5969126  2.9729916  2.2556419  0.9922990 -0.4526005  1.9155297 #>  [7]  1.9944033  1.4451368  2.6224192  2.7482640 # Optimize a custom proposal for N(3, 2) proposal <- srnorm_optimize(mean = 3, sd = 2, steps = 2000)  # Generate a sample of size 10^3 from N(3, 2) sample <- srnorm_custom(10^3)  # Visualize the generated sample hist(sample, main = \"Histogram of Samples from N(3, 2)\", xlab = \"Value\", col = \"skyblue\", border = \"white\") # Define the truncation bounds lower_bound <- -1 upper_bound <- 1  # Optimize the scalable proposal with truncation bounds proposal <- srnorm_optimize(xl = lower_bound, xr = upper_bound, steps = 4091)  # Generate samples from the truncated standard Normal distribution sample <- srnorm(10^3) hist(sample, main = \"Truncated Standard Normal (-1, 1)\", xlab = \"Value\", col = \"lightblue\", border = \"white\") # Generate samples from the truncated Normal distribution N(2, 1) sample <- srnorm(10^3, mean = 2) hist(sample, main = \"Truncated Normal N(2, 1) (-1, 1)\", xlab = \"Value\", col = \"lightgreen\", border = \"white\") # Define the truncation bounds lower_bound <- 2 upper_bound <- 6  # Optimize a custom proposal with truncation bounds and mean = 4 proposal <- srnorm_optimize(mean = 4, xl = lower_bound, xr = upper_bound, steps = 4091)  # Generate samples from the truncated Normal distribution sample <- srnorm_custom(10^3) hist(sample, main = \"Truncated Custom Normal (2, 6)\", xlab = \"Value\", col = \"lightblue\", border = \"white\") # Optimize a proposal for the Laplace distribution proposal <- srlaplace_optimize(steps = 4091)  # View the details of the optimized proposal print(proposal) #>  #> ── Proposal Summary ──────────────────────────────────────────────────────────── #> • Total steps: 4,091 #> • Steps range: [-6.611093, 6.335299] #> • Sampling efficiency: 99.84%  # Visualize the proposal plot(proposal) # Optimize a proposal for the Normal distribution proposal <- srlaplace_optimize(steps = 1020)  # Visualize the entire proposal plot(proposal, main = \"Full Grid Visualization\") # Focus on a specific region of the proposal (e.g., x-axis range -2 to 2) plot(proposal, x_min = -1, x_max = 1, main = \"Zoomed-In Grid (-1, 1)\") # Customizing the proposal for a specific sample size custom_proposal <- srnorm_optimize(target_sample_size = 10000)  print(custom_proposal) #>  #> ── Proposal Summary ──────────────────────────────────────────────────────────── #> • Total steps: 132 #> • Steps range: [-2.735325, 2.735325] #> • Sampling efficiency: 97.42%  plot(custom_proposal) # Customizing the proposal with a specific pre-acceptance threshold custom_proposal_high_theta <- srnorm_optimize(theta = 0.9)  print(custom_proposal_high_theta) #>  #> ── Proposal Summary ──────────────────────────────────────────────────────────── #> • Total steps: 1,934 #> • Steps range: [-2.659710, 2.659710] #> • Sampling efficiency: 99.73%  plot(custom_proposal_high_theta) # Customizing the proposal within a specific range custom_proposal_range <- srnorm_optimize(proposal_range = c(-1, 1))  print(custom_proposal_range) #>  #> ── Proposal Summary ──────────────────────────────────────────────────────────── #> • Total steps: 82 #> • Steps range: [-1.026970, 1.026970] #> • Sampling efficiency: 86.32%  plot(custom_proposal_range) # Customizing the proposal with a specific number of steps custom_proposal_steps <- srnorm_optimize(steps = 50)  plot(custom_proposal_steps) custom_proposal_steps <- srnorm_optimize(steps = 500)  plot(custom_proposal_steps) #> ✔ Proposal number 1 deleted #> ✔ Proposal number 2 deleted #> `geom_line()`: Each group consists of only one observation. #> ℹ Do you need to adjust the group aesthetic? #> ✔ Proposal number 1 deleted #> `geom_line()`: Each group consists of only one observation. #> ℹ Do you need to adjust the group aesthetic? #> `geom_line()`: Each group consists of only one observation. #> ℹ Do you need to adjust the group aesthetic? #> • `srnorm_custom()` #> • `srlaplace_custom()` #> • `srexp_custom()` #> • `srchisq_custom()` #> • `srgamma_custom()` #> • `srbeta_custom()` #> • `srpareto_custom()`"},{"path":"https://ahmad-alqabandi.github.io/stors/articles/Sampling_user_distributions.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Sampling from User-Defined Distributions using stors","text":"stors package designed generate samples uni- multimodal distributions using Rejection Sampling techniques. provides optimized sampling functions built-distributions, STORS also offers flexibility users define distributions create custom proposals efficient sampling. vignette, focus use stors package sample user-defined distributions. demonstrate build custom proposals distributions covered built-functions utilize package’s functions sample efficiently distributions. sample user-defined distributions, can create custom proposals using build_proposal() function use build_proposal() function create sampler based custom proposal.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/articles/Sampling_user_distributions.html","id":"sampling-from-user-defined-distributions","dir":"Articles","previous_headings":"","what":"Sampling from User-Defined Distributions","title":"Sampling from User-Defined Distributions using stors","text":"distributions covered built-functions satisfy log-concavity condition, users flexibility create proposals using build_proposal() function. function designed handle variety distributions accepting range parameters tailored specific needs distribution sampled . following example demonstrates process sampling bimodal normal distribution. Let’s assume want sample bimodal distribution, combination two normal distributions f(x)=0.5w1(x)+0.5w2(x)f(x) = 0.5 w_1(x) + 0.5 w_2(x), w1(x)∼N(0,1)w_1(x) \\sim N(0, 1) w2(x)∼N(4,1)w_2(x) \\sim N(4, 1): f(x)=0.512πexp(−x22)+0.512πexp(−(x−4)22) f(x) =  0.5 \\frac{1}{\\sqrt{2 \\pi}}  \\exp\\left(-\\frac{x^2}{2}\\right) + 0.5  \\frac{1}{\\sqrt{2 \\pi}} \\exp\\left(-\\frac{(x - 4)^2}{2}\\right) sample tails f(x)f(x) using ARS, need log transformation f(x)f(x), h(x)=log(f(x))h(x) = \\log(f(x)), first derivative hprime(x)=ddxh(x)h_{\\text{prime}}(x) = \\frac{d}{dx} h(x). Also, modes f(x)f(x) required build steps part proposal distribution, case approximately x=0x = 0 x=4x = 4.  building desired proposal build_proposal(), users can explore properties using print() function visualize structure using plot() function. step similar done previously built-proposal helps understanding proposal’s configuration ensuring aligns requirements target distribution.  proposal configured validated, can passed build_sampler() function. build_sampler() caches proposal memory, providing fast access sampling, returns sampler function target distribution. sampler function can used generate samples needed.   Sampling Truncated User-Defined Distribution sample truncated user-defined distribution, simply provide lower upper truncation bounds using (lower bound) (upper bound) arguments. , demonstrate process using previously created multi-modal distribution. Example: Sampling Truncated Multi-Modal Distribution","code":"library(stors)  modes_bi <- c(0.00134865, 3.99865)  f_bi <- function(x) {   0.5 * (sqrt(2 * pi))^(-1) * exp(-(x^2) / 2) + 0.5 * (sqrt(2 * pi))^(-1) * exp(-((x - 4)^2) / 2) }  h_bi <- function(x) log(f_bi(x))   h_prime_bi <- function(x) {   (-(exp(-1 / 2 * (-4 + x)^2) * 0.5 * (-4 + x)) / sqrt(2 * pi) - (exp(-x^2 / 2) * 0.5 * x) / sqrt(2 *  pi)) / ((exp(-x^2 / 2) * 0.5) / sqrt(2 * pi) + (exp(-1 / 2 * (-4 + x)^2) * 0.5) / sqrt(2 * pi)) }  bi_proposal <- build_proposal(lower = -Inf, upper = Inf, modes = modes_bi, f = f_bi, h = h_bi, h_prime = h_prime_bi)  plot(bi_proposal) # Printing the properties of the custom proposal print(bi_proposal) #>  #> ── Proposal Summary ──────────────────────────────────────────────────────────── #> • Total steps: 8,626 #> • Steps range: [-3.814665, 7.813697] #> • Sampling efficiency: 99.90%  # Visualizing the custom proposal plot(bi_proposal) # Creating a sampler function using the custom proposal bi_sampler <- build_sampler(bi_proposal)  plot(bi_proposal) # Generating samples from the target distribution sample <- bi_sampler(10^3)  hist(sample, main = \"Sample Generated From Multi-modal Distribution \", xlab = \"Value\", col = \"lightblue\", border = \"white\") # Define modes for the multi-modal distribution modes_bi <- c(0.00134865, 3.99865)  # Build a truncated proposal for the multi-modal distribution bi_trunc_proposal <- build_proposal(   lower = -1,   upper = 6,   modes = modes_bi,   f = f_bi,   h = h_bi,   h_prime = h_prime_bi,   steps = 2040 )  # Visualize the truncated proposal plot(bi_trunc_proposal, main = \"Truncated Multi-Modal Proposal (-1, 6)\", xlab = \"Value\", col = \"skyblue\") #> `geom_line()`: Each group consists of only one observation. #> ℹ Do you need to adjust the group aesthetic? # Create a sampler for the truncated distribution bi_sampler_trunc_sampler <- build_sampler(bi_trunc_proposal)  # Generate 10^3 samples from the truncated distribution sample <- bi_sampler_trunc_sampler(10^3)  # Generate 10^3 samples from the truncated distribution sample <- bi_sampler_trunc_sampler(10^3)  # Visualize the generated samples hist(   sample,   main = \"Histogram of Samples from Truncated Multi-Modal Distribution\",   xlab = \"Value\",   col = \"lightgreen\",   border = \"white\" )"},{"path":"https://ahmad-alqabandi.github.io/stors/articles/Sampling_user_distributions.html","id":"saving-loading-and-deleting-users-proposals","dir":"Articles","previous_headings":"","what":"Saving, Loading and Deleting Users’ Proposals","title":"Sampling from User-Defined Distributions using stors","text":"proposal stored bi_proposal preserved across sessions. Therefore, user satisfied sampling results wishes store proposal future use, save proposal using save_proposal() function. function takes optimized proposal filename chosen user save proposal internal R data directory machine. recommended user plans use proposal frequently across sessions, avoid re-optimizing proposal future sessions. load use proposal future sessions, user needs use load_proposal() function. case user wants view list previously stored proposals, print_proposals() function provide user stored proposals. aware saved proposal can quite large size, depending user’s system. Therefore, user wants delete proposal, delete_proposal() function can used providing proposal’s name.","code":"save_proposal(bi_proposal, \"bimodal_proposal\") bi_proposal <- load_proposal(\"bimodal_proposal\") print_proposals() #>  #> ── Proposals Data ────────────────────────────────────────────────────────────── #> Name                 | Size (KB)       | Date #> ----------------------------------------------- #> bimodal_proposal_1   | 258.15          | 2025-03-02 20:35:53 #> bimodal_proposal_2   | 258.15          | 2025-03-02 20:35:53 #> bimodal_proposal_3   | 258.15          | 2025-03-02 20:35:53 #> bimodal_proposal     | 258.15          | 2025-03-02 20:35:53 #> bimodal              | 26.88           | 2025-03-02 20:35:17 #> normal               | 23.05           | 2025-03-02 20:35:17 #> ----------------------------------------------- #> Total Size: 1082.54 delete_proposal(\"bimodal_proposal\") #> ✔ \"bimodal_proposal.rds\" proposal deleted successfully  print_proposals() #>  #> ── Proposals Data ────────────────────────────────────────────────────────────── #> Name                 | Size (KB)       | Date #> ----------------------------------------------- #> bimodal_proposal_1   | 258.15          | 2025-03-02 20:35:53 #> bimodal_proposal_2   | 258.15          | 2025-03-02 20:35:53 #> bimodal_proposal_3   | 258.15          | 2025-03-02 20:35:53 #> bimodal              | 26.88           | 2025-03-02 20:35:17 #> normal               | 23.05           | 2025-03-02 20:35:17 #> ----------------------------------------------- #> Total Size: 824.38"},{"path":"https://ahmad-alqabandi.github.io/stors/articles/stors_package.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"stors package","text":"aim stors package generate samples uni- multimodal distributions using Rejection Sampling technique. Stors stands ability leverage system’s capabilities optimize sampling process. Stors maximizes sampling speed proposal distribution constructing steps uniform areas cover target distribution sampling needed. address potential efficiency issues heavy light-tailed distributions, switch Adaptive Rejection Sampling (ARS) tails, specifically proposals created user. Fortunately, since ARS used tails, eliminates requirement log concavity distributions, allowing us cover wide range distributions log-concave tails normal multimodal distrebutions. use stors package, need differentiate two phases. first phase involves building proposal proposal distribution. second step caching proposal memory sampling. ensures optimum speed performance, proposal data constructed independently sampling process. R base sampling functions already covered stors package, making sampling straightforward.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/articles/stors_package.html","id":"sampling-from-built-in-distrubutions","dir":"Articles","previous_headings":"","what":"Sampling from Built-in Distrubutions","title":"stors package","text":"sample built-distribution, proposal distribution pre-optimized using 4091 steps package loaded first time. optimization process constructs proposal stores internal R data directory. proposal cached memory efficient sampling whenever needed. can also visualize proposal data using function better understand structure. ’s example optimizing proposal Normal distribution (note: process performed automatically package installed loaded first time):  optimized proposal ready, sampling Normal distribution specific straightforward using function. hand, users can optimize proposal specific Normal distribution calling passing desired arguments. case, unique proposal optimized cached memory. sample custom proposal, user can use function simply specifying sample size.  sample truncated Normal distribution, users need optimize either scalable proposal custom proposal specify truncation bounds using (lower bound) (upper bound) arguments.   process can applied custom proposal. custom proposal can truncated used sampling following example:  functions optimize proposal also return detailed list describing properties optimized proposal. list provides insights proposal’s structure characteristics. can use base function view details function visualize proposal.  cases proposal dense difficult visualize entirety, can focus specific region using function parameters. parameters allow set limits x-axis, making easier zoom areas interest within proposal.   functionalists proposal_optimizers subsequent visualization tools provide users -depth insights characteristics generated proposal, enabling understand fine-tune sampling process. user satisfied automatically optimized proposal, proposal_optimizers functions offers several arguments customization. One argument target_sample_size, defaults 1000. user wishes optimize proposal significantly larger smaller sample sizes, argument can altered. Another important argument pre-acceptance threshold theta, essentially ratio lower upper linear bounds step. typically set small number close zero. reason cost rejecting samples, even heavy-tailed distributions, usually less cost using alternative exact sampling methods (like Inverse Transform) dense proposals, probability hitting inefficient steps low. However, large sample sizes (e.g., 10^9), inefficient steps might hit frequently, leading increase sampling time due lower efficiency. cases, user can set higher pre-acceptance threshold using theta parameter. users less familiar target distribution, want focus specific range distribution, proposal_range argument can used. parameter limits step construction specified range x-axis, offering control proposal structure.    addition target_sample_size, theta, proposal_range parameters, users flexibility directly control number steps proposal. can particularly useful users specific requirements preferences granularity proposal. specify number steps, steps argument can passed proposal_optimizer function. setting steps parameter, users can determine resolution proposal, can impact balance computational efficiency granularity sampling. higher number steps typically provides detailed proposal, potentially leading precise sampling, cost increased memory usage possibly longer computation times.   user can also create symmetric proposal built-distributions setting argument value around target density symmetric. Example: Creating Symmetric Proposal Standard Normal Distribution example, create symmetric proposal standard Normal distribution. , first delete previously constructed non-symmetric proposals (scaled custom) using function.  Sampling Truncated Distributions One standout features STORS ability sample efficiently truncated distributions. sample truncated distribution, user simply needs specify upper lower truncation bounds using (lower bound) (upper bound) arguments function. Example: Sampling Truncated Standard Normal Distribution example, demonstrate sample truncated standard Normal distribution truncation bounds .  many built-functions stors, list shows available functions can used directly user optimizing proposals: built-distribution, corresponding proposal distribution optimizer can invoked using format . function optimizes proposal specified distribution, enabling efficient sampling.","code":"library(stors)  # Optimize a proposal for the Normal distribution with 4091 steps proposal <- srnorm_optimize(steps = 4091)  # Visualize the optimized proposal plot(proposal) # Generating 10 samples from the standard Normal distribution standard_normal_samples <- srnorm(10, mean = 2, sd = 1) print(standard_normal_samples) #>  [1]  0.5969126  2.9729916  2.2556419  0.9922990 -0.4526005  1.9155297 #>  [7]  1.9944033  1.4451368  2.6224192  2.7482640 # Optimize a custom proposal for N(3, 2) proposal <- srnorm_optimize(mean = 3, sd = 2, steps = 2000)  # Generate a sample of size 10^3 from N(3, 2) sample <- srnorm_custom(10^3)  # Visualize the generated sample hist(sample, main = \"Histogram of Samples from N(3, 2)\", xlab = \"Value\", col = \"skyblue\", border = \"white\") # Define the truncation bounds lower_bound <- -1 upper_bound <- 1  # Optimize the scalable proposal with truncation bounds proposal <- srnorm_optimize(xl = lower_bound, xr = upper_bound, steps = 4091)  # Generate samples from the truncated standard Normal distribution sample <- srnorm(10^3) hist(sample, main = \"Truncated Standard Normal (-1, 1)\", xlab = \"Value\", col = \"lightblue\", border = \"white\") # Generate samples from the truncated Normal distribution N(2, 1) sample <- srnorm(10^3, mean = 2) hist(sample, main = \"Truncated Normal N(2, 1) (-1, 1)\", xlab = \"Value\", col = \"lightgreen\", border = \"white\") # Define the truncation bounds lower_bound <- 2 upper_bound <- 6  # Optimize a custom proposal with truncation bounds and mean = 4 proposal <- srnorm_optimize(mean = 4, xl = lower_bound, xr = upper_bound, steps = 4091)  # Generate samples from the truncated Normal distribution sample <- srnorm_custom(10^3) hist(sample, main = \"Truncated Custom Normal (2, 6)\", xlab = \"Value\", col = \"lightblue\", border = \"white\") # Optimize a proposal for the Laplace distribution proposal <- srlaplace_optimize(steps = 4091)  # View the details of the optimized proposal print(proposal) #>  #> ── Proposal Summary ──────────────────────────────────────────────────────────── #> • Total steps: 4,091 #> • Steps range: [-6.611093, 6.335299] #> • Sampling efficiency: 99.84%  # Visualize the proposal plot(proposal) # Optimize a proposal for the Normal distribution proposal <- srlaplace_optimize(steps = 1020)  # Visualize the entire proposal plot(proposal, main = \"Full Proposal Visualization\") # Focus on a specific region of the proposal (e.g., x-axis range -2 to 2) plot(proposal, x_min = -1, x_max = 1, main = \"Zoomed-In Proposal (-1, 1)\") # Customizing the proposal for a specific sample size custom_proposal <- srnorm_optimize(target_sample_size = 10000)  print(custom_proposal) #>  #> ── Proposal Summary ──────────────────────────────────────────────────────────── #> • Total steps: 132 #> • Steps range: [-2.735325, 2.735325] #> • Sampling efficiency: 97.42%  plot(custom_proposal) # Customizing the proposal with a specific pre-acceptance threshold custom_proposal_high_theta <- srnorm_optimize(theta = 0.9)  print(custom_proposal_high_theta) #>  #> ── Proposal Summary ──────────────────────────────────────────────────────────── #> • Total steps: 1,934 #> • Steps range: [-2.659710, 2.659710] #> • Sampling efficiency: 99.73%  plot(custom_proposal_high_theta) # Customizing the proposal within a specific range custom_proposal_range <- srnorm_optimize(proposal_range = c(-1, 1))  print(custom_proposal_range) #>  #> ── Proposal Summary ──────────────────────────────────────────────────────────── #> • Total steps: 82 #> • Steps range: [-1.026970, 1.026970] #> • Sampling efficiency: 86.32%  plot(custom_proposal_range) # Customizing the proposal with a specific number of steps custom_proposal_steps <- srnorm_optimize(steps = 50)  plot(custom_proposal_steps) custom_proposal_steps <- srnorm_optimize(steps = 500)  plot(custom_proposal_steps) #> ✔ Proposal number 1 deleted #> ✔ Proposal number 2 deleted #> `geom_line()`: Each group consists of only one observation. #> ℹ Do you need to adjust the group aesthetic? #> ✔ Proposal number 1 deleted #> `geom_line()`: Each group consists of only one observation. #> ℹ Do you need to adjust the group aesthetic? #> `geom_line()`: Each group consists of only one observation. #> ℹ Do you need to adjust the group aesthetic? #> • `srnorm_custom()` #> • `srlaplace_custom()` #> • `srexp_custom()` #> • `srchisq_custom()` #> • `srgamma_custom()` #> • `srbeta_custom()` #> • `srpareto_custom()`"},{"path":"https://ahmad-alqabandi.github.io/stors/articles/stors_package.html","id":"sampling-from-users-distributions","dir":"Articles","previous_headings":"","what":"Sampling from Users’ Distributions","title":"stors package","text":"distributions covered built-functions satisfy log concavity condition, users flexibility create proposals using build_proposal() function. function designed handle variety distributions accepting range parameters tailored specific needs distribution sampled . following example demonstrates process sampling bimodal normal distribution. Let’s assume user wants sample bimodal distribution, combination two normal distributions f(x)=0.5w1(x)+0.5w2(x)f(x) = 0.5 w_1(x) + 0.5 w_2(x), w1(x)∼N(0,1)w_1(x) \\sim N(0, 1) w2(x)∼N(4,1)w_2(x) \\sim N(4, 1): f(x)=0.512πexp(−x22)+0.512πexp(−(x−4)22) f(x) =  0.5 \\frac{1}{\\sqrt{2 \\pi}}  \\exp\\left(-\\frac{x^2}{2}\\right) + 0.5  \\frac{1}{\\sqrt{2 \\pi}} \\exp\\left(-\\frac{(x - 4)^2}{2}\\right) sample tails f(x)f(x) using ARS, need log transformation f(x)f(x), h(x)=log(f(x))h(x) = log(f(x)), first derivative hprime(x)=ddxh(x)h_\\text{prime}(x) = \\frac{d}{dx} h(x). Also, modes f(x)f(x) required build steps part proposal distribution, case 0.00134865 3.99865.  building desired proposal build_proposal(), users can explore properties using print() function visualize structure using plot() function. step similar done previously built-proposal helps understanding proposal’s configuration ensuring aligns requirements target distribution.  proposal configured validated, can passed build_sampler() function. build_sampler() caches proposal memory, providing fast access sampling, returns sampler function target distribution. sampler function can used generate samples needed.   Sampling Truncated User-Defined Distribution sample truncated user-defined distribution, simply provide lower upper truncation bounds using (lower bound) (upper bound) arguments. , demonstrate process using previously created multi-modal distribution. Example: Sampling Truncated Multi-Modal Distribution","code":"modes_bi <- c(0.00134865, 3.99865)  f_bi <- function(x) {   0.5 * (sqrt(2 * pi))^(-1) * exp(-(x^2) / 2) + 0.5 * (sqrt(2 * pi))^(-1) * exp(-((x - 4)^2) / 2) }  h_bi <- function(x) log(f_bi(x))   h_prime_bi <- function(x) {   (-(exp(-1 / 2 * (-4 + x)^2) * 0.5 * (-4 + x)) / sqrt(2 * pi) - (exp(-x^2 / 2) * 0.5 * x) / sqrt(2 *  pi)) / ((exp(-x^2 / 2) * 0.5) / sqrt(2 * pi) + (exp(-1 / 2 * (-4 + x)^2) * 0.5) / sqrt(2 * pi)) }  bi_proposal <- build_proposal(lower = -Inf, upper = Inf, modes = modes_bi, f = f_bi, h = h_bi, h_prime = h_prime_bi)  plot(bi_proposal) # Printing the properties of the custom proposal print(bi_proposal) #>  #> ── Proposal Summary ──────────────────────────────────────────────────────────── #> • Total steps: 4,099 #> • Steps range: [-3.817446, 7.816738] #> • Sampling efficiency: 99.80%  # Visualizing the custom proposal plot(bi_proposal) # Creating a sampler function using the custom proposal bi_sampler <- build_sampler(bi_proposal)  plot(bi_proposal) # Generating samples from the target distribution sample <- bi_sampler(10^3)  hist(sample, main = \"Sample Generated From Multi-modal Distribution \", xlab = \"Value\", col = \"lightblue\", border = \"white\") # Define modes for the multi-modal distribution modes_bi <- c(0.00134865, 3.99865)  # Build a truncated proposal for the multi-modal distribution bi_trunc_proposal <- build_proposal(   lower = -1,   upper = 6,   modes = modes_bi,   f = f_bi,   h = h_bi,   h_prime = h_prime_bi,   steps = 2040 )  # Visualize the truncated proposal plot(bi_trunc_proposal, main = \"Truncated Multi-Modal Proposal (-1, 6)\", xlab = \"Value\", col = \"skyblue\") #> `geom_line()`: Each group consists of only one observation. #> ℹ Do you need to adjust the group aesthetic? # Create a sampler for the truncated distribution bi_sampler_trunc_sampler <- build_sampler(bi_trunc_proposal)  # Generate 10^3 samples from the truncated distribution sample <- bi_sampler_trunc_sampler(10^3)  # Generate 10^3 samples from the truncated distribution sample <- bi_sampler_trunc_sampler(10^3)  # Visualize the generated samples hist(   sample,   main = \"Histogram of Samples from Truncated Multi-Modal Distribution\",   xlab = \"Value\",   col = \"lightgreen\",   border = \"white\" )"},{"path":"https://ahmad-alqabandi.github.io/stors/articles/stors_package.html","id":"saving-loading-and-deleting-users-proposals","dir":"Articles","previous_headings":"","what":"Saving, Loading and Deleting Users’ Proposals","title":"stors package","text":"proposal stored bi_proposal preserved across sessions. Therefore, user satisfied sampling results wishes store proposal future use, save proposal using save_proposal() function. function takes optimized proposal filename chosen user save proposal internal R data directory machine. recommended user plans use proposal frequently across sessions, avoid re-optimizing proposal future sessions. load use proposal future sessions, user needs use load_proposal() function. case user wants view list previously stored proposals, print_proposals() function provide user stored proposals. aware saved proposal can quite large size, depending user’s system. Therefore, user wants delete proposal, delete_proposal() function can used providing proposal’s name.","code":"save_proposal(bi_proposal, \"bimodal_proposal\") bi_proposal <- load_proposal(\"bimodal_proposal\") print_proposals() #>  #> ── Proposals Data ────────────────────────────────────────────────────────────── #> Name                 | Size (KB)       | Date #> ----------------------------------------------- #> bimodal_proposal_1   | 124.98          | 2025-03-02 20:36:12 #> bimodal_proposal_2   | 124.98          | 2025-03-02 20:36:12 #> bimodal_proposal_3   | 124.98          | 2025-03-02 20:36:12 #> bimodal_proposal     | 124.98          | 2025-03-02 20:36:12 #> bimodal              | 26.88           | 2025-03-02 20:35:17 #> normal               | 23.05           | 2025-03-02 20:35:17 #> ----------------------------------------------- #> Total Size: 549.85 delete_proposal(\"bimodal_proposal\") #> ✔ \"bimodal_proposal.rds\" proposal deleted successfully  print_proposals() #>  #> ── Proposals Data ────────────────────────────────────────────────────────────── #> Name                 | Size (KB)       | Date #> ----------------------------------------------- #> bimodal_proposal_1   | 124.98          | 2025-03-02 20:36:12 #> bimodal_proposal_2   | 124.98          | 2025-03-02 20:36:12 #> bimodal_proposal_3   | 124.98          | 2025-03-02 20:36:12 #> bimodal              | 26.88           | 2025-03-02 20:35:17 #> normal               | 23.05           | 2025-03-02 20:35:17 #> ----------------------------------------------- #> Total Size: 424.87"},{"path":"https://ahmad-alqabandi.github.io/stors/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ahmad ALQabandi. Maintainer, author. Louis Aslett. Author, thesis advisor.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"ALQabandi , Aslett L (2025). stors: Steps Optimized Rejection Sampling. R package version 0.2.1, https://ahmad-alqabandi.github.io/stors/.","code":"@Manual{,   title = {stors: Steps Optimized Rejection Sampling},   author = {Ahmad ALQabandi and Louis Aslett},   year = {2025},   note = {R package version 0.2.1},   url = {https://ahmad-alqabandi.github.io/stors/}, }"},{"path":"https://ahmad-alqabandi.github.io/stors/index.html","id":"id_-stors-r-package-","dir":"","previous_headings":"","what":"Steps Optimized Rejection Sampling","title":"Steps Optimized Rejection Sampling","text":"StORS optimized rejection sampling method designed efficient sampling univariate statistical distributions. constructs proposal distribution using computationally efficient steps adapt around target distribution. Built-distributions can type unbounded tails, Inverse Transform sampling used necessary. However, user-provided distributions, unbounded, tails must log-concave since Adaptive Rejection Sampling (ARS) applied case.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Steps Optimized Rejection Sampling","text":"can install StORS directly R-universe: GitHub:","code":"install.packages('stors', repos = c('https://ahmad-alqabandi.r-universe.dev', 'https://cloud.r-project.org')) # install.packages(\"pak\") pak::pak(\"ahmad-alqabandi/stors\")"},{"path":[]},{"path":"https://ahmad-alqabandi.github.io/stors/index.html","id":"sampling-from-a-built-in-normal-distribution","dir":"","previous_headings":"Example","what":"Sampling from a Built-in Normal Distribution","title":"Steps Optimized Rejection Sampling","text":"first example demonstrates sampling built-Normal distribution using pre-optimized proposal constructed package installation time efficiency.","code":"library(\"stors\")  # Generate 1000 samples from the standard normal distribution x <- srnorm(1000)  # Visualize the distribution hist(x)"},{"path":"https://ahmad-alqabandi.github.io/stors/index.html","id":"re-optimizing-the-built-in-normal-proposal","dir":"","previous_headings":"Example","what":"Re-optimizing the Built-in Normal Proposal","title":"Steps Optimized Rejection Sampling","text":"needed, user can re-optimize proposal normal distribution. can useful tasks sampling truncated normal distribution.","code":"# Re-optimize the proposal for a truncated normal distribution (e.g., between -2 and 2) srnorm_optimize(xl = -2, xr = 2)  # Generate new samples using the optimized proposal x <- srnorm(1000)  # Visualize the truncated normal distribution hist(x)"},{"path":"https://ahmad-alqabandi.github.io/stors/index.html","id":"building-a-proposal-for-a-custom-distribution","dir":"","previous_headings":"Example","what":"Building a Proposal for a Custom Distribution","title":"Steps Optimized Rejection Sampling","text":"Users can build custom proposal passing probability density function (PDF) build_proposal. following example demonstrates building proposal Pareto distribution. details, please see Getting Started vignette","code":"# Define the Pareto PDF dpareto <- function(x, alpha) {   alpha / x^(alpha + 1) }  # Build a proposal distribution for Pareto g <- build_proposal(f = dpareto,                     modes = 1,                     lower = 1,                     upper = Inf,                     steps = 256,                     alpha = 2,                     )  # Print and plot the proposal print(g) plot(g)  # Create a sampler from the proposal rpareto_sampler <- build_sampler(g)  # Generate 1000 samples from the Pareto distribution x <- rpareto_sampler(1000)  # Visualize the sampled distribution hist(x)"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/build_proposal.html","id":null,"dir":"Reference","previous_headings":"","what":"Build Proposal — build_proposal","title":"Build Proposal — build_proposal","text":"Constructs step optimized proposal density, squeezing function, log-linear tail proposal user defined probability density function.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/build_proposal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build Proposal — build_proposal","text":"","code":"build_proposal(   f,   modes,   lower = -Inf,   upper = Inf,   h = NULL,   h_prime = NULL,   steps = NULL,   proposal_range = NULL,   theta = 0.1,   target_sample_size = 1000,   verbose = FALSE,   ... )"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/build_proposal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build Proposal — build_proposal","text":"f function returns (unnormalised) probability density function target distribution. first argument must value pdf evaluated. Additional arguments may parameters distribution, specified name ... arguments. modes Numeric vector modes density function. lower Numeric scalar representing lower bound target density. Default -Inf unbounded lower support. upper Numeric scalar representing upper bound target density. Default Inf unbounded upper support. h optional function returns (unnormalised) log-probability density function target distribution. f first argument must value log-pdf evaluated additional parameters may named arguments passed .... h_prime optional function returns first derivative (unnormalised) log-probability density function target distribution. f first argument must value log-pdf evaluated additional parameters may named arguments passed .... steps Optional integer scalar specifying number steps step optimised part proposal density squeezing function. proposal_range Optional numeric vector length 2 specifying lower upper range steps step optimised part proposal density squeezing function. range contained within interval defined lower upper. theta Optional numeric scalar (0.1 1) defining pre-acceptance threshold. dictates steps added step optimised part proposal density squeezing function, based probability pre-acceptance. target_sample_size Integer scalar indicating typical sample size requested sampling density using build_sampler. proposal optimization process bases benchmark timings target size order select proposal best suited desired sample size. Note limit sampling number, merely guide user aware certain sample size commonly sampled. verbose Logical scalar. TRUE, table detailing optimization areas steps displayed proposal optimization. Defaults FALSE. ... arguments passed f, h, h_prime, depend additional parameters.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/build_proposal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build Proposal — build_proposal","text":"returns list used construct sampler passing build_sampler function. list containing optimized proposal related parameters specified built-distribution: data data frame detailed information proposal steps, including: x start point step x-axis. s_upper height step y-axis. p_a Pre-acceptance probability step. s_upper_lower vector used scale uniform random number sample accepted. areas numeric vector containing areas : left_tail left tail bound. steps middle steps. right_tail right tail bound. steps_number integer specifying number steps proposal. sampling_probabilities numeric vector : left_tail probability sampling left tail. left_and_middle combined probability sampling left tail middle steps. unif_scaler numeric scalar, inverse probability sampling steps part proposal (\\(\\frac{1}{p(lower < x < upper)}\\)). Used scaling uniform random values. lt_properties numeric vector 5 values required Adaptive Rejection Sampling (ARS) left tail. rt_properties numeric vector 6 values required ARS right tail. alpha numeric scalar representing uniform step area. tails_method string, either \"ARS\" (Adaptive Rejection Sampling) \"\" (Inverse Transform), indicating sampling method tails. proposal_bounds numeric vector specifying left right bounds target density. cnum integer representing cache number created proposal memory. symmetric numeric scalar indicating symmetry point proposal, NULL symmetric. f_params list parameters target density proposal designed . is_symmetric logical value indicating whether proposal symmetric. proposal_type string indicating type generated proposal: \"scaled\" proposal \"scalable\" standardized rate = 1. used parameter rate either NULL provided. Scalable proposals compatible srexp. \"custom\" proposal \"custom\" rate provided. Custom proposals compatible srexp_custom. target_function_area numeric scalar estimating area target distribution. dens_func string containing hardcoded density function. density_name string specifying name target density distribution. lock identifier used saving loading proposal disk.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/build_proposal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build Proposal — build_proposal","text":"function starting point user wishes build custom sampler using StORS. responsible generating step optimized proposal density, squeezing function, log-linear tail proposal can utilized purpose. minimum information must supplied user : (closed) interval support distribution, [lower, upper] \\(\\\\mathbb{R}\\), may also half-closed either side, \\(\\mathbb{R}\\). probability density function (pdf), need normalised, f. modes pdf, vector modes. Optionally, log-pdf derivative log-pdf may supplied. Arguments pdf pdf (log-pdf first derivative log-pdf) may depend certain parameters. , can second argument onward f. instance, consider Kumaraswamy distribution, pdf: $$f(x; ,b) = b x^{-1}{ (1-x^)}^{b-1},  \\ \\ \\mbox{} \\ \\ x \\(0,1)$$ pdf known modes. , implement custom StORS sampler, first define pdf R: dkumaraswamy <- function(x, , b) *b*(x^(-1))*(1-x^)^(b-1) , construct StORS proposal \\(=2\\) \\(b=2\\), call Proposal <- build_Proposal(lower = 0, upper = 1, modes = sqrt(1/3), f = dkumaraswamy, = 2, b = 2) StORS proposal construction StORS defines unnormalised piecewise constant proposal density squeezing function, Proposal defining change points. optimise execution speed modern CPUs, unnormalised piecewise constant proposal fixed area segment one end segment coinciding user's pdf. , step function width defined \\(w_i = (x_i - x_{-1})\\) height determined \\(h_i = \\max(f(x_{-1}), f(x_i))\\), \\(w_i h_i = \\alpha \\ \\forall\\,\\) \\(\\alpha\\) constant. user constructed proposal, sampling function can built using build_sampler(). Internal details function build_final_Proposal() manages construction steps calculates values critical sampling process. resultant Proposal used build_sampler() function, values cached, significantly enhancing computational efficiency hence improving sampling speed. optimization process, aim certain Proposal size based L1-3 memory cache size. Therefore, test speed Proposals sizes \\(2^m\\) Kb. achieve , estimate uniform step area based certain steps number leads target cache size, \\( \\alpha = \\frac{1}{\\text{number steps}} \\). speed testing possible Proposal initially based sample size 1000. However, user wishes optimize Proposal different sample size, can specifying desired sample size using target_sample_size argument. case user wants select specific number steps proposal bypass optimization process, can done specifying steps number greater number modes 2 using steps argument. target density heavy-tailed, user wishes stop Proposal building process certain pre-acceptance threshold, can achieved setting acceptance probability threshold theta \\(\\theta\\). steps reach level pre-acceptance probability, step construction end \\( \\frac{\\min(f(x_i), f(x_{+1}))}{\\max(f(x_i), f(x_{+1}))} < \\theta \\). Alternatively, user wishes create steps within certain limits x-axis, can specifying proposal limits using proposal_range argument.","code":""},{"path":[]},{"path":"https://ahmad-alqabandi.github.io/stors/reference/build_proposal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build Proposal — build_proposal","text":"","code":"# Example 1: Building a proposal for Standard Normal Distribution # This example demonstrates constructing a proposal for a standard normal distribution # \\( f(x) \\sim \\mathcal{N}(0,1) \\), # and shows the optimization table by setting \\code{verbose} to \\code{TRUE}.  # Define the density function, its logarithm, # and its derivative for the standard normal distribution modes_norm = 0 f_norm <- function(x) { 1 / sqrt(2 * pi) * exp(-0.5 * x^2) } h_norm <- function(x) { log(f_norm(x)) } h_prime_norm <- function(x) { -x }  # Build the proposal for the standard normal distribution norm_proposal = build_proposal(lower = -Inf, upper = Inf, mode = modes_norm,  f = f_norm, h = h_norm, h_prime = h_prime_norm, verbose = TRUE) #>  #> ── Optimization Summary ──────────────────────────────────────────────────────── #>  #>  #>  Step:        Inf | Area: 0.008130081  #> ----------------------------------------------- #>         Steps      |       Area       |    Best Sim Time #>  ----------------------------------------------- #> ---        132 ---  --- 0.007723577 ---   ---   98003.00 --- #> ---        126 ---  --- 0.008130081 ---   ---  120564.50 --- #> ---        120 ---  --- 0.008536585 ---   ---  113201.50 --- #>  #>  #>  Step:        Inf | Area: 0.003984064  #> ----------------------------------------------- #>         Steps      |       Area       |    Best Sim Time #>  ----------------------------------------------- #> ---        268 ---  --- 0.003784861 ---   ---   65256.50 --- #> ---        254 ---  --- 0.003984064 ---   ---   57321.50 --- #> ---        242 ---  --- 0.004183267 ---   ---   72069.50 --- #>  #>  #>  Step:        Inf | Area: 0.001972387  #> ----------------------------------------------- #>         Steps      |       Area       |    Best Sim Time #>  ----------------------------------------------- #> ---        538 ---  --- 0.001873767 ---   ---   38377.00 --- #> ---        512 ---  --- 0.001972387 ---   ---   45831.00 --- #> ---        488 ---  --- 0.002071006 ---   ---   53194.50 --- #>  #>  #>  Step:        Inf | Area: 0.000981354  #> ----------------------------------------------- #>         Steps      |       Area       |    Best Sim Time #>  ----------------------------------------------- #> ---       1078 ---  --- 0.000932287 ---   ---   34139.00 --- #> ---       1024 ---  --- 0.000981354 ---   ---   28418.00 --- #> ---        976 ---  --- 0.001030422 ---   ---   34424.00 --- #>  #>  #>  Step:        Inf | Area: 0.000489476  #> ----------------------------------------------- #>         Steps      |       Area       |    Best Sim Time #>  ----------------------------------------------- #> ---       2156 ---  --- 0.000465002 ---   ---   21290.00 --- #> ---       2048 ---  --- 0.000489476 ---   ---   18705.00 --- #> ---       1952 ---  --- 0.000513950 ---   ---   25858.00 --- #>  #>  #>  Step:        Inf | Area: 0.000244439  #> ----------------------------------------------- #>         Steps      |       Area       |    Best Sim Time #>  ----------------------------------------------- #> ---       4312 ---  --- 0.000232217 ---   ---   17667.50 --- #> ---       4098 ---  --- 0.000244439 ---   ---   18479.50 --- #> ---       3902 ---  --- 0.000256661 ---   ---   15544.00 --- #>  #>  #>  Step:        Inf | Area: 0.000122145  #> ----------------------------------------------- #>         Steps      |       Area       |    Best Sim Time #>  ----------------------------------------------- #> ---       8626 ---  --- 0.000116038 ---   ---   17859.00 --- #> ---       8194 ---  --- 0.000122145 ---   ---   13901.00 --- #> ---       7804 ---  --- 0.000128252 ---   ---   18650.00 --- #>  #>  #>  Step:        Inf | Area: 0.000061054  #> ----------------------------------------------- #>         Steps      |       Area       |    Best Sim Time #>  ----------------------------------------------- #> ---      17248 ---  --- 0.000058001 ---   ---   25467.50 --- #> ---      16386 ---  --- 0.000061054 ---   ---   24259.50 --- #> ---      15606 ---  --- 0.000064106 ---   ---   20273.00 --- #>  #> ──────────────────────────────────────────────────────────────────────────────── #>  #> ── Performance Data: ─────────────────────────────────────────────────────────── #>      Area       |     Time     |   Steps #> ----------------------------------------- #>  0.0077235772 |   98003.00 |     132 #>  0.0039840637 |   57321.50 |     254 #>  0.0018737673 |   38377.00 |     538 #>  0.0009813543 |   28418.00 |    1024 #>  0.0004894763 |   18705.00 |    2048 #>  0.0002566610 |   15544.00 |    3902 #>  0.0001221449 |   13901.00 |    8194 #> ────────────────────────────────────────────────────────────────────────────────  # Plot the generated proposal plot(norm_proposal)   # Example 2: proposal for a Bimodal Distribution # This example shows how to build a proposal for sampling from a bimodal distribution, #combining two normal distributions # \\( f(x) = 0.5 \\cdot w_1(x) + 0.5 \\cdot w_2(x) \\), # where \\( w_1(x) \\sim \\mathcal{N}(0, 1) \\) and \\( w_2(x) \\sim \\mathcal{N}(4, 1) \\).  # Define the bimodal density function f_bimodal <- function(x) {   0.5 * (1 / sqrt(2 * pi)) * exp(-(x^2) / 2) + 0.5 * (1 / sqrt(2 * pi)) * exp(-((x - 4)^2) / 2) } modes_bimodal = c(0.00134865, 3.99865)  # Build the proposal for the bimodal distribution bimodal_proposal = build_proposal( f = f_bimodal, lower = -Inf, upper = Inf, mode = modes_bimodal)  # Print and plot the bimodal proposal print(bimodal_proposal) #>  #> ── Proposal Summary ──────────────────────────────────────────────────────────── #> • Total steps: 7,806 #> • Steps range: [-4.044247, 8.042763] #> • Sampling efficiency: 99.88% plot(bimodal_proposal)   # Example 3: Proposal with 500 Steps for Bimodal Distribution # This example demonstrates constructing a proposal with 500 steps, # for the bimodal distribution used in Example 2.  bimodal_proposal_500 = build_proposal(f = f_bimodal, lower = -Inf, upper = Inf,  mode = modes_bimodal, steps = 500)  # Print and plot the proposal with 500 steps print(bimodal_proposal_500) #>  #> ── Proposal Summary ──────────────────────────────────────────────────────────── #> • Total steps: 500 #> • Steps range: [-2.332842, 6.332824] #> • Sampling efficiency: 98.89%"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/build_sampler.html","id":null,"dir":"Reference","previous_headings":"","what":"Sampling Function for User Defined Density — build_sampler","title":"Sampling Function for User Defined Density — build_sampler","text":"function generates sampling function based proposal created user using build_proposal() function. resulting sampling function can used produce samples.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/build_sampler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampling Function for User Defined Density — build_sampler","text":"","code":"build_sampler(proposal)"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/build_sampler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sampling Function for User Defined Density — build_sampler","text":"proposal sampling proposal created using build_proposal() function.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/build_sampler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sampling Function for User Defined Density — build_sampler","text":"Returns function can used generate samples specified proposal.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/build_sampler.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sampling Function for User Defined Density — build_sampler","text":"user creates proposal desired sampling function using build_proposal, proposal must passed build_sampler() create sampling function target distribution. build_sampler() first checks whether proposal indeed created using build_proposal(). user altered modified proposal returned build_proposal(), build_sampler() reject altered proposal; therefore, changes made proposal creation. proposal accepted build_sampler(), cached memory, allowing fast access proposal data compiled C code reducing memory access latency. Subsequently, build_sampler() returns function can utilized generate samples target distribution,","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/build_sampler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sampling Function for User Defined Density — build_sampler","text":"","code":"# Example 1 # To sample from a standard normal distribution \\( f(x) \\sim \\mathcal{N}(0,1) \\), # first build the proposal using \\code{build_proposal()}  modes_norm = 0 f_norm <- function(x) { 1 / sqrt(2 * pi) * exp(-0.5 * x^2) } h_norm <- function(x) { log(f_norm(x)) } h_prime_norm <- function(x) { -x } normal_proposal = build_proposal(lower = -Inf, upper = Inf, mode = modes_norm,  f = f_norm, h = h_norm, h_prime = h_prime_norm, steps = 1000)  # Generate samples from the standard normal distribution sample_normal <- build_sampler(normal_proposal) hist(sample_normal(100), main = \"Normal Distribution Samples\")    # Example 2 # Let's consider a bimodal distribution composed of two normal distributions: # The first normal distribution N(0,1) with weight p = 0.3, # and the second normal distribution N(4,1) with weight q = 0.7.  f_bimodal <- function(x) {  0.3 * (1 / sqrt(2 * pi) * exp(-0.5 * (x - 0)^2)) +  0.7 * (1 / sqrt(2 * pi) * exp(-0.5 * (x - 4)^2)) }  # Define the modes of the bimodal distribution    modes_bimodal <- c(0.00316841, 3.99942)  # Build the proposal for the bimodal distribution bimodal_proposal = build_proposal(f = f_bimodal, modes = modes_bimodal,  lower = -Inf, upper = Inf, steps = 1000)  # Create the sampling function using \\code{build_sampler()} sample_bimodal <- build_sampler(bimodal_proposal)  # Generate and plot samples from the bimodal distribution bimodal_samples <- sample_bimodal(1000) hist(bimodal_samples, breaks = 30, main = \"Bimodal Distribution Samples\")   # Create the truncated sampling function using # \\code{build_sampler()} with truncation bounds [-0.5, 6] truncated_bimodal_proposal <- build_proposal(f = f_bimodal,  modes = modes_bimodal, lower = -0.5, upper = 6, steps = 1000)  # Create the sampling function using \\code{build_sampler()} sample_truncated_bimodal <- build_sampler(truncated_bimodal_proposal)  # Generate and plot samples from the truncated bimodal distribution truncated_sample <- sample_truncated_bimodal(1000) hist(truncated_sample, breaks = 30, main = \"Truncated Bimodal Distribution Samples\")"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/delete_built_in_proposal.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete Built-in Proposal — delete_built_in_proposal","title":"Delete Built-in Proposal — delete_built_in_proposal","text":"function deletes built-proposals disk specifying sampling function proposal type. useful managing cached proposals freeing storage space.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/delete_built_in_proposal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete Built-in Proposal — delete_built_in_proposal","text":"","code":"delete_built_in_proposal(sampling_function, proposal_type = \"custom\")"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/delete_built_in_proposal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete Built-in Proposal — delete_built_in_proposal","text":"sampling_function String. name sampling distribution's function STORS. example, \"srgamma\" \"srchisq\". proposal_type String. Either \"custom\" delete custom proposal \"scaled\" delete scaled proposal. Defaults \"custom\".","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/delete_built_in_proposal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete Built-in Proposal — delete_built_in_proposal","text":"message indicating status deletion process, error operation fails.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/delete_built_in_proposal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Delete Built-in Proposal — delete_built_in_proposal","text":"function looks specified proposal type associated sampling function built-proposals directory. proposal exists, deletes corresponding proposal file disk frees cached resources. specified sampling function proposal type exist, error thrown.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/delete_built_in_proposal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete Built-in Proposal — delete_built_in_proposal","text":"","code":"# The following examples are commented, since if they are run the srgamma and # srnorm samplers will no longer work until a new grid is built for them. # This causes problems if the examples are run by CRAN checks or the website # build system, hence they are commented.  # Delete a custom proposal for the srgamma function (uncomment to run) #delete_built_in_proposal(sampling_function = \"srgamma\", proposal_type = \"custom\")  # Delete a scaled proposal for the srnorm function (uncomment to run) #delete_built_in_proposal(sampling_function = \"srnorm\", proposal_type = \"scaled\")"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/delete_proposal.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete Proposal — delete_proposal","title":"Delete Proposal — delete_proposal","text":"function deletes proposal previously stored user using save_proposal() function. useful managing stored proposals freeing space.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/delete_proposal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete Proposal — delete_proposal","text":"","code":"delete_proposal(proposal_name)"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/delete_proposal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete Proposal — delete_proposal","text":"proposal_name string specifying name proposal deleted.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/delete_proposal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete Proposal — delete_proposal","text":"proposal_name exist, function returns error message. proposal exists successfully deleted, message confirming successful removal displayed.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/delete_proposal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete Proposal — delete_proposal","text":"","code":"# First, let's create a proposal to sample from a standard normal distribution f_normal <- function(x) { 0.3989423 * exp(-0.5 * x^2) } normal_proposal = build_proposal(f = f_normal, modes = 0, lower = -Inf, upper = Inf, steps = 1000) print(normal_proposal) #>  #> ── Proposal Summary ──────────────────────────────────────────────────────────── #> • Total steps: 1,000 #> • Steps range: [-2.876766, 2.876766] #> • Sampling efficiency: 99.56%  # Then, save this proposal in R's internal data directory using # `save_proposal()` with the name \"normal\" save_proposal(normal_proposal, \"normal\")  # Now, we can print all proposals stored on this machine using `print_proposals()` print_proposals() #>  #> ── Proposals Data ────────────────────────────────────────────────────────────── #> Name                 | Size (KB)       | Date                 #> ----------------------------------------------- #> normal               | 23.05           | 2025-03-02 20:35:15  #> ----------------------------------------------- #> Total Size: 23.05  # The list will include the `normal_proposal` stored under the name \"normal\"  # To delete the \"normal\" proposal from the machine, pass its name to `delete_proposal` delete_proposal(\"normal\") #> ✔ \"normal.rds\" proposal deleted successfully  # Now, when we print all stored proposals, the \"normal\" proposal will no longer be listed print_proposals() #> No stored proposals."},{"path":"https://ahmad-alqabandi.github.io/stors/reference/load_proposal.html","id":null,"dir":"Reference","previous_headings":"","what":"Load Stored Proposal — load_proposal","title":"Load Stored Proposal — load_proposal","text":"function loads proposal memory previously saved using save_proposal() function. useful retrieving saved proposals analysis processing.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/load_proposal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load Stored Proposal — load_proposal","text":"","code":"load_proposal(proposal_name)"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/load_proposal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load Stored Proposal — load_proposal","text":"proposal_name string specifying name proposal loaded.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/load_proposal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load Stored Proposal — load_proposal","text":"Returns list representing proposal stored proposal_name R's internal data directory. proposal corresponding specified name exist, error message displayed.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/load_proposal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load Stored Proposal — load_proposal","text":"","code":"# First, let's create a proposal to sample from a standard normal distribution f_normal <- function(x) { 0.3989423 * exp(-0.5 * x^2) } normal_proposal = build_proposal(f = f_normal, modes = 0, lower = -Inf, upper = Inf, steps = 1000) print(normal_proposal) #>  #> ── Proposal Summary ──────────────────────────────────────────────────────────── #> • Total steps: 1,000 #> • Steps range: [-2.876766, 2.876766] #> • Sampling efficiency: 99.56%  # Then, save this proposal in R's internal data directory using # `save_proposal()` with the name \"normal\" save_proposal(normal_proposal, \"normal\")  # Now, in case the R session is restarted and the proposal is no longer in memory, # it can be loaded from the machine as follows: loaded_normal_proposal <- load_proposal(\"normal\") print(loaded_normal_proposal) #>  #> ── Proposal Summary ──────────────────────────────────────────────────────────── #> • Total steps: 1,000 #> • Steps range: [-2.876766, 2.876766] #> • Sampling efficiency: 99.56%"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/plot.proposal.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Method for Proposal Objects — plot.proposal","title":"Plot Method for Proposal Objects — plot.proposal","text":"function evaluates properties included target proposal functions create plot functions. cases proposal function's steps part dense, x_min x_max can set crop scale chart better visualization.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/plot.proposal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Method for Proposal Objects — plot.proposal","text":"","code":"# S3 method for class 'proposal' plot(x, x_min = NA, x_max = NA, ...)"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/plot.proposal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Method for Proposal Objects — plot.proposal","text":"x list generated using STORS' build_proposal() proposal_optimizer() functions. x_min scalar represents left cropping chart x-axis. x_max scalar represents right cropping chart x-axis. ... Additional arguments passed plot function.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/plot.proposal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Method for Proposal Objects — plot.proposal","text":"plot target density proposal. ggplot2 available, returns ggplot object representing plot. otherwise, uses base plot() function.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/plot.proposal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Method for Proposal Objects — plot.proposal","text":"method extends generic plot() function objects class proposal. offers custom plotting functionality specifically designed visualizing proposal objects.","code":""},{"path":[]},{"path":"https://ahmad-alqabandi.github.io/stors/reference/plot.proposal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Method for Proposal Objects — plot.proposal","text":"","code":"# Define the density function, its logarithm, # and its derivative for the standard normal distribution modes_norm = 0 f_norm <- function(x) { 1 / sqrt(2 * pi) * exp(-0.5 * x^2) } h_norm <- function(x) { log(f_norm(x)) } h_prime_norm <- function(x) { -x }  # Build a dense proposal for the standard normal distribution norm_proposal = build_proposal(lower = -Inf, upper = Inf, mode = modes_norm,  f = f_norm, h = h_norm, h_prime = h_prime_norm, steps = 4000)  # Plot the generated proposal plot(norm_proposal)   # To visualize the proposal in a cropped area between -0.1 and 0 plot(norm_proposal, x_min = -0.1, x_max = 0)"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/print.proposal.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for proposal Objects — print.proposal","title":"Print Method for proposal Objects — print.proposal","text":"function displays detailed information proposal object created STORS' build_proposal() proposal_optimizer() functions. includes number steps within proposal, range values covered proposal, proposal's sampling efficiency. information crucial understanding structure performance proposal sampling processes.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/print.proposal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for proposal Objects — print.proposal","text":"","code":"# S3 method for class 'proposal' print(x, ...)"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/print.proposal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for proposal Objects — print.proposal","text":"x list generated using STORS' build_proposal() proposal_optimizer() functions. ... Additional arguments passed print function.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/print.proposal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method for proposal Objects — print.proposal","text":"Prints summary proposal's properties, return value.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/print.proposal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print Method for proposal Objects — print.proposal","text":"method extends generic print function objects class proposal. prints provided proposal's features number steps, steps limit, efficiency.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/print.proposal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Method for proposal Objects — print.proposal","text":"","code":"# Define the density function, its logarithm, #and its derivative for the standard normal distribution modes_norm = 0 f_norm <- function(x) { 1 / sqrt(2 * pi) * exp(-0.5 * x^2) } h_norm <- function(x) { log(f_norm(x)) } h_prime_norm <- function(x) { -x }  # Build a dense proposal for the standard normal distribution norm_proposal = build_proposal(lower = -Inf, upper = Inf, mode = modes_norm,  f = f_norm, h = h_norm, h_prime = h_prime_norm, steps = 1000)  # Print the properties of the generated proposal  print(norm_proposal) #>  #> ── Proposal Summary ──────────────────────────────────────────────────────────── #> • Total steps: 1,000 #> • Steps range: [-2.876766, 2.876766] #> • Sampling efficiency: 99.56%"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/print_proposals.html","id":null,"dir":"Reference","previous_headings":"","what":"Print proposals — print_proposals","title":"Print proposals — print_proposals","text":"function prints details proposals stored user. provides information proposal, including proposal name, size, efficiency, relevant details.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/print_proposals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print proposals — print_proposals","text":"","code":"print_proposals()"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/print_proposals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print proposals — print_proposals","text":"","code":"# First, let's create a proposal to sample from a standard normal distribution f_normal <- function(x) { 0.3989423 * exp(-0.5 * x^2) } normal_proposal = build_proposal(f = f_normal, modes = 0, lower = -Inf, upper = Inf, steps = 1000) print(normal_proposal) #>  #> ── Proposal Summary ──────────────────────────────────────────────────────────── #> • Total steps: 1,000 #> • Steps range: [-2.876766, 2.876766] #> • Sampling efficiency: 99.56%  # `print_proposals()` prints all proposals stored in R's internal data directory. # To see this, we first save `normal_proposal` using `save_proposal()` save_proposal(normal_proposal, \"normal\")  # Since `normal_proposal` is now stored on this machine, # we can confirm this by printing all saved proposals print_proposals() #>  #> ── Proposals Data ────────────────────────────────────────────────────────────── #> Name                 | Size (KB)       | Date                 #> ----------------------------------------------- #> normal               | 23.05           | 2025-03-02 20:35:17  #> ----------------------------------------------- #> Total Size: 23.05  # Example 2: Create and Save a proposal for a Bimodal Distribution f_bimodal <- function(x) {   0.5 * (1 / sqrt(2 * pi)) * exp(-(x^2) / 2) +   0.5 * (1 / sqrt(2 * pi)) * exp(-((x - 4)^2) / 2) } modes_bimodal = c(0, 4) bimodal_proposal = build_proposal(f = f_bimodal, modes = modes_bimodal, lower = -Inf, upper = Inf, steps = 1000)  save_proposal(bimodal_proposal, \"bimodal\") print(bimodal_proposal) #>  #> ── Proposal Summary ──────────────────────────────────────────────────────────── #> • Total steps: 1,000 #> • Steps range: [-2.560912, 6.560912] #> • Sampling efficiency: 99.42%  # To print all stored proposals after saving bimodal_proposal print_proposals() #>  #> ── Proposals Data ────────────────────────────────────────────────────────────── #> Name                 | Size (KB)       | Date                 #> ----------------------------------------------- #> bimodal              | 26.88           | 2025-03-02 20:35:17  #> normal               | 23.05           | 2025-03-02 20:35:17  #> ----------------------------------------------- #> Total Size: 49.93"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/save_proposal.html","id":null,"dir":"Reference","previous_headings":"","what":"Save User Proposal — save_proposal","title":"Save User Proposal — save_proposal","text":"function stores proposals generated build_proposal() function R's internal data directory. useful users want reuse proposal across multiple R sessions.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/save_proposal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save User Proposal — save_proposal","text":"","code":"save_proposal(proposal, proposal_name)"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/save_proposal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save User Proposal — save_proposal","text":"proposal list representing optimized proposal generated using build_proposal() function. proposal_name string specifying name proposal saved.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/save_proposal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save User Proposal — save_proposal","text":"function produce error proposal generated build_proposal() function. Otherwise, successfully saves proposal without returning value upon completion.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/save_proposal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save User Proposal — save_proposal","text":"","code":"# First, let's create a proposal to sample from a standard normal distribution f_normal <- function(x) { 0.3989423 * exp( -0.5 * x^2) } normal_proposal = build_proposal(f = f_normal, modes = 0, lower = -Inf, upper = Inf, steps = 1000) print(normal_proposal) #>  #> ── Proposal Summary ──────────────────────────────────────────────────────────── #> • Total steps: 1,000 #> • Steps range: [-2.876766, 2.876766] #> • Sampling efficiency: 99.56%  # Then, we can save this proposal in R's internal data directory using `save_proposal()` # with the name \"normal\" save_proposal(normal_proposal, \"normal\")  # To make sure the `normal_proposal` has been stored in R's internal data directory, # we can print all saved proposals using `print_proposals()` print_proposals() #>  #> ── Proposals Data ────────────────────────────────────────────────────────────── #> Name                 | Size (KB)       | Date                 #> ----------------------------------------------- #> bimodal              | 26.88           | 2025-03-02 20:35:17  #> normal               | 23.05           | 2025-03-02 20:35:17  #> ----------------------------------------------- #> Total Size: 49.93"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srbeta_custom.html","id":null,"dir":"Reference","previous_headings":"","what":"Sampling from Beta Distribution — srbeta_custom","title":"Sampling from Beta Distribution — srbeta_custom","text":"srbeta_custom() function generates random samples Beta distribution using STORS algorithm. employs optimized proposal distribution around mode Adaptive Rejection Sampling (ARS) tails.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srbeta_custom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampling from Beta Distribution — srbeta_custom","text":"","code":"srbeta_custom(n = 1, x = NULL)"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srbeta_custom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sampling from Beta Distribution — srbeta_custom","text":"n Integer, length 1. Number samples draw. x (optional) Numeric vector length \\(n\\). provided, vector overwritten place avoid memory allocation.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srbeta_custom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sampling from Beta Distribution — srbeta_custom","text":"numeric vector length n containing random samples Beta distribution. shape1 shape2 parameters specified optimization process using srbeta_optimize(). NOTE: x parameter specified, updated -place simulation performance reasons.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srbeta_custom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sampling from Beta Distribution — srbeta_custom","text":"Beta Distribution Beta distribution probability density function (PDF): $$f(x | \\alpha, \\beta) = \\frac{\\Gamma(\\alpha + \\beta)}{\\Gamma(\\alpha)\\Gamma(\\beta)} x^{\\alpha - 1} (1 - x)^{\\beta - 1}, \\quad 0 \\leq x \\leq 1,$$ : \\(\\alpha\\) first shape parameter (\\(\\alpha > 0\\)). \\(\\beta\\) second shape parameter (\\(\\beta > 0\\)). Beta distribution widely used Bayesian statistics modeling probabilities proportions.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srbeta_custom.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Sampling from Beta Distribution — srbeta_custom","text":"function scalable. Therefore, srbeta_custom() version available, requires proposal pre-optimized using srbeta_optimize() calling function.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srbeta_custom.html","id":"todo-this-density-instead-of-this-function-","dir":"Reference","previous_headings":"","what":"TODO : This density instead of this function.","title":"Sampling from Beta Distribution — srbeta_custom","text":"function samples proposal constructed using srbeta_optimize, employing STORS algorithm. default, srbeta_custom() samples standard Beta distribution shape1 = 1 shape2 = 1. proposal distribution pre-optimized package load time using srbeta_optimize() steps = 4091, creating scalable proposal centered around mode.","code":""},{"path":[]},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srbeta_custom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sampling from Beta Distribution — srbeta_custom","text":"","code":"# Generate 10 samples from Beta Distribution samples <- srbeta_custom(10) print(samples) #>  [1] 0.75877365 0.46540625 0.63261582 0.65141625 0.17607349 0.08627441 #>  [7] 0.50061956 0.79581749 0.51414438 0.61036993  # Generate 10 samples using a pre-allocated vector x <- numeric(10) srbeta_custom(10, x = x) #>  [1] 0.5902930 0.7003434 0.3445182 0.4578834 0.6197412 0.7940716 0.5658722 #>  [8] 0.3566920 0.3328912 0.8368528 print(x) #>  [1] 0.5902930 0.7003434 0.3445182 0.4578834 0.6197412 0.7940716 0.5658722 #>  [8] 0.3566920 0.3328912 0.8368528"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srbeta_optimize.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimizing Beta Distribution proposal — srbeta_optimize","title":"Optimizing Beta Distribution proposal — srbeta_optimize","text":"srbeta_optimize() function generates optimized proposal targeted Beta distribution. proposal can customized adjusted based various options provided user.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srbeta_optimize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizing Beta Distribution proposal — srbeta_optimize","text":"","code":"srbeta_optimize(   shape1 = 2,   shape2 = 2,   xl = 0,   xr = 1,   steps = NULL,   proposal_range = NULL,   theta = 0.1,   target_sample_size = 1000,   verbose = FALSE )"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srbeta_optimize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimizing Beta Distribution proposal — srbeta_optimize","text":"shape1 (optional) Numeric. first shape parameter (\\(\\alpha\\)) Beta distribution. Defaults 1. shape2 (optional) Numeric. second shape parameter (\\(\\beta\\)) Beta distribution. Defaults 1. xl Numeric. Left truncation bound target distribution. Defaults 0, Beta distribution defined interval [0, 1]. xr Numeric. Right truncation bound target distribution. Defaults 1, Beta distribution defined interval [0, 1]. steps (optional) Integer. Desired number steps proposal. Defaults 4091. proposal_range (optional) Numeric vector. Specifies range optimizing steps part proposal. Defaults NULL, indicating automatic range selection. theta Numeric. parameter proposal optimization. Defaults 0.1. target_sample_size (optional) Integer. Target sample size proposal optimization. Defaults 1000. verbose Boolean. TRUE, detailed optimization information, including areas steps, displayed. Defaults FALSE.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srbeta_optimize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimizing Beta Distribution proposal — srbeta_optimize","text":"list containing optimized proposal related parameters specified Beta distribution. proposal also cached internal use. data Detailed information proposal steps, including x, s_upper, p_a, s_upper_lower. areas areas left tail, steps, right tail proposal distribution. steps_number number steps proposal. f_params parameters (shape1 shape2) Beta distribution.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srbeta_optimize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Optimizing Beta Distribution proposal — srbeta_optimize","text":"srbeta_optimize() explicitly called: proposal created cached. parameters provided, standard proposal created shape1 = 1 shape2 = 1. Providing shape1 shape2 creates custom proposal, cached use srbeta_custom(). optimization process can controlled via parameters steps, proposal_range, theta. parameters provided, proposal optimized via brute force based target_sample_size.","code":""},{"path":[]},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srbeta_optimize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimizing Beta Distribution proposal — srbeta_optimize","text":"","code":"# Generate a standard proposal with shape1 = 1 and shape2 = 1 standard_proposal <- srbeta_optimize()  # Generate a custom proposal with shape1 = 2 and shape2 = 3 custom_proposal <- srbeta_optimize(shape1 = 2, shape2 = 3)"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srchisq_custom.html","id":null,"dir":"Reference","previous_headings":"","what":"Sampling from Chi-squared Distribution — srchisq_custom","title":"Sampling from Chi-squared Distribution — srchisq_custom","text":"srchisq_custom() function generates random samples Chi-squared Distribution using STORS algorithm. employs optimized proposal distribution around mode Adaptive Rejection Sampling (ARS) tails.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srchisq_custom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampling from Chi-squared Distribution — srchisq_custom","text":"","code":"srchisq_custom(n = 1, x = NULL)"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srchisq_custom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sampling from Chi-squared Distribution — srchisq_custom","text":"n Integer, length 1. Number samples draw. x (optional) Numeric vector length \\(n\\). provided, vector written place avoid memory allocation.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srchisq_custom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sampling from Chi-squared Distribution — srchisq_custom","text":"numeric vector length n containing random samples Chi-squared distribution. degrees freedom (df) distribution specified optimization process using srchisq_optimize(). NOTE: x parameter specified, updated -place simulation performance reasons.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srchisq_custom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sampling from Chi-squared Distribution — srchisq_custom","text":"Chi-squared Distribution Chi-squared distribution probability density function (PDF): $$f(x | k) = \\frac{1}{2^{k/2} \\Gamma(k/2)} x^{(k/2) - 1} \\exp(-x/2), \\quad x \\geq 0,$$ : \\(k\\) degrees freedom (\\(k > 0\\)), determines shape distribution. Chi-squared distribution widely used hypothesis testing constructing confidence intervals, particularly context variance estimation. function sampling proposal constructed using srchisq_optimize, using STORS algorithm. default, srchisq_custom() samples Chi-squared Distribution df = 2. proposal distribution pre-optimized package load time using srchisq_optimize() steps = 4091, creating scalable proposal centered around mode.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srchisq_custom.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Sampling from Chi-squared Distribution — srchisq_custom","text":"function scalable. Therefore, srchisq_custom() version available, requires proposal pre-optimized using srchisq_optimize() calling function.","code":""},{"path":[]},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srchisq_custom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sampling from Chi-squared Distribution — srchisq_custom","text":"","code":"# Genedf 10 samples from Chi-squared Distribution samples <- srchisq_custom(10) print(samples) #>  [1] 0.08848449 0.27499077 1.33322302 1.24467408 1.08466337 1.34550369 #>  [7] 2.47222675 5.54324807 2.52830266 3.77384373  # Genedf 10 samples using a pre-allocated vector x <- numeric(10) srchisq_custom(10, x = x) #>  [1] 0.8479755 0.6106373 1.7436757 2.2767746 0.7399850 2.7860310 3.5329956 #>  [8] 0.3508704 0.8656289 2.5594872 print(x) #>  [1] 0.8479755 0.6106373 1.7436757 2.2767746 0.7399850 2.7860310 3.5329956 #>  [8] 0.3508704 0.8656289 2.5594872"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srchisq_optimize.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimizing Chi-squared Distribution proposal — srchisq_optimize","title":"Optimizing Chi-squared Distribution proposal — srchisq_optimize","text":"srchisq_optimize() function generates optimized proposal targeted Chi-squared Distribution. proposal can customized adjusted based various options provided user.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srchisq_optimize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizing Chi-squared Distribution proposal — srchisq_optimize","text":"","code":"srchisq_optimize(   df = 2,   xl = NULL,   xr = NULL,   steps = 4091,   proposal_range = NULL,   theta = 0.1,   target_sample_size = 1000,   verbose = FALSE )"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srchisq_optimize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimizing Chi-squared Distribution proposal — srchisq_optimize","text":"df (optional) Numeric. degrees freedom parameter Chi-squared Distribution. Defaults NULL, implies proposal df = 2. xl Numeric. Left truncation bound target distribution. Defaults -Inf, representing left truncation. xr Numeric. Right truncation bound target distribution. Defaults Inf, representing right truncation. steps (optional) Integer. Desired number steps proposal. Defaults NULL, means number steps determined automatically optimization. proposal_range (optional) Numeric vector. Specifies range optimizing steps part proposal. Defaults NULL, indicating automatic range selection. theta Numeric. parameter proposal optimization. Defaults 0.1. target_sample_size (optional) Integer. Target sample size proposal optimization. Defaults 1000. verbose Boolean. TRUE, detailed optimization information, including areas steps, displayed. Defaults FALSE.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srchisq_optimize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimizing Chi-squared Distribution proposal — srchisq_optimize","text":"user need store returned value, package internally cashes proposal. However, explain full returned proposal advanced users. list containing optimized proposal related parameters specified built-distribution: data data frame detailed information proposal steps, including: x start point step x-axis. s_upper height step y-axis. p_a Pre-acceptance probability step. s_upper_lower vector used scale uniform random number sample accepted. areas numeric vector containing areas : left_tail left tail bound. steps middle steps. right_tail right tail bound. steps_number integer specifying number steps proposal. sampling_probabilities numeric vector : left_tail probability sampling left tail. left_and_middle combined probability sampling left tail middle steps. unif_scaler numeric scalar, inverse probability sampling steps part proposal (\\(\\frac{1}{p(lower < x < upper)}\\)). Used scaling uniform random values. lt_properties numeric vector 5 values required Adaptive Rejection Sampling (ARS) left tail. rt_properties numeric vector 6 values required ARS right tail. alpha numeric scalar representing uniform step area. tails_method string, either \"ARS\" (Adaptive Rejection Sampling) \"\" (Inverse Transform), indicating sampling method tails. proposal_bounds numeric vector specifying left right bounds target density. cnum integer representing cache number created proposal memory. symmetric numeric scalar indicating symmetry point proposal, NULL symmetric. f_params list parameters target density proposal designed . is_symmetric logical value indicating whether proposal symmetric. proposal_type string indicating type genedfd proposal: \"custom\" proposal \"custom\" df provided. Custom proposals compatible srchisq_custom. target_function_area numeric scalar estimating area target distribution. dens_func string containing hardcoded density function. density_name string specifying name target density distribution. lock identifier used saving loading proposal disk.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srchisq_optimize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Optimizing Chi-squared Distribution proposal — srchisq_optimize","text":"srchisq_optimize() explicitly called: proposal created cached. parameters provided, standard proposal created df = 2. Providing df creates custom proposal, cached use srchisq_custom(). optimization process can controlled via parameters steps, proposal_range, theta. parameters provided, proposal optimized via brute force based . target_sample_size.","code":""},{"path":[]},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srchisq_optimize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimizing Chi-squared Distribution proposal — srchisq_optimize","text":"","code":"# Genedf custom proposal that with df = 2, that has 4096 steps scalable_proposal <- srchisq_optimize(steps = 4096)  # Genedf custom proposal that with df = 4 scalable_proposal <- srchisq_optimize(df = 4)"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srexp.html","id":null,"dir":"Reference","previous_headings":"","what":"Sampling from Exponential Distribution — srexp","title":"Sampling from Exponential Distribution — srexp","text":"srexp() function generates random samples Exponential Distribution using STORS algorithm. employs optimized proposal distribution around mode Inverse Transform () method tails.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srexp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampling from Exponential Distribution — srexp","text":"","code":"srexp(n = 1, rate = 1, x = NULL)  srexp_custom(n = 1, x = NULL)"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srexp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sampling from Exponential Distribution — srexp","text":"n Integer, length 1. Number samples draw. rate Numeric. rate parameter Exponential Distribution. x (optional) Numeric vector length \\(n\\). provided, vector written place avoid memory allocation.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srexp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sampling from Exponential Distribution — srexp","text":"numeric vector length n containing samples Exponential Distribution specified rate. NOTE: x parameter specified, updated -place simulation performance reasons.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srexp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sampling from Exponential Distribution — srexp","text":"Exponential distribution probability density function (PDF): \\(f(x | \\lambda) = \\lambda \\exp(-\\lambda x), \\quad x \\geq 0,\\) : \\(\\lambda\\) rate parameter (\\(\\lambda > 0\\)), determines rate decay distribution. Exponential distribution commonly used model time independent events occur constant average rate. two functions sampling using STORS algorithm based proposal constructed using srexp_optimize. default, srexp() samples standard Exponential Distribution rate = 1. proposal distribution pre-optimized package load time using srexp_optimize() steps = 4091, creating scalable proposal centered around mode. srexp() called custom rate parameter, samples generated standard Exponential Distribution, scaled accordingly.","code":""},{"path":[]},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srexp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sampling from Exponential Distribution — srexp","text":"","code":"# Generate 10 samples from the standard Exponential Distribution samples <- srexp(10) print(samples) #>  [1] 0.5603843 0.2844683 0.4954779 2.1691440 0.1536847 0.1738814 0.6721279 #>  [8] 0.5504264 0.1415577 0.3971108  # Generate 10 samples using a pre-allocated vector x <- numeric(10) srexp(10, x = x) #>  [1] 0.59366667 1.24779486 0.97384716 0.24309197 1.03282179 1.36348987 #>  [7] 0.32088562 2.05045399 0.17722475 0.02695628 print(x) #>  [1] 0.59366667 1.24779486 0.97384716 0.24309197 1.03282179 1.36348987 #>  [7] 0.32088562 2.05045399 0.17722475 0.02695628  # Generate 10 samples from a Exponential Distribution with rate = 4 samples <- srexp(10, rate = 4) print(samples) #>  [1] 0.041349464 0.224742396 0.106423296 0.478133937 0.112295795 0.091989576 #>  [7] 1.295193902 0.006852274 0.740551723 0.124286375"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srexp_optimize.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimizing Exponential Distribution proposal — srexp_optimize","title":"Optimizing Exponential Distribution proposal — srexp_optimize","text":"srexp_optimize() function generates optimized proposal targeted Exponential Distribution. proposal can customized adjusted based various options provided user.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srexp_optimize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizing Exponential Distribution proposal — srexp_optimize","text":"","code":"srexp_optimize(   rate = NULL,   xl = NULL,   xr = NULL,   steps = 4091,   proposal_range = NULL,   theta = 0.1,   target_sample_size = 1000,   verbose = FALSE )"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srexp_optimize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimizing Exponential Distribution proposal — srexp_optimize","text":"rate (optional) Numeric. rate parameter Exponential Distribution. Defaults NULL, implies scalable proposal rate = 1. xl Numeric. Left truncation bound target distribution. Defaults -Inf, representing left truncation. xr Numeric. Right truncation bound target distribution. Defaults Inf, representing right truncation. steps (optional) Integer. Desired number steps proposal. Defaults NULL, means number steps determined automatically optimization. proposal_range (optional) Numeric vector. Specifies range optimizing steps part proposal. Defaults NULL, indicating automatic range selection. theta Numeric. parameter proposal optimization. Defaults 0.1. target_sample_size (optional) Integer. Target sample size proposal optimization. Defaults 1000. verbose Boolean. TRUE, detailed optimization information, including areas steps, displayed. Defaults FALSE.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srexp_optimize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimizing Exponential Distribution proposal — srexp_optimize","text":"user need store returned value, package internally cashes proposal. However, explain full returned proposal advanced users. list containing optimized proposal related parameters specified built-distribution: data data frame detailed information proposal steps, including: x start point step x-axis. s_upper height step y-axis. p_a Pre-acceptance probability step. s_upper_lower vector used scale uniform random number sample accepted. areas numeric vector containing areas : left_tail left tail bound. steps middle steps. right_tail right tail bound. steps_number integer specifying number steps proposal. sampling_probabilities numeric vector : left_tail probability sampling left tail. left_and_middle combined probability sampling left tail middle steps. unif_scaler numeric scalar, inverse probability sampling steps part proposal (\\(\\frac{1}{p(lower < x < upper)}\\)). Used scaling uniform random values. lt_properties numeric vector 5 values required Adaptive Rejection Sampling (ARS) left tail. rt_properties numeric vector 6 values required ARS right tail. alpha numeric scalar representing uniform step area. tails_method string, either \"ARS\" (Adaptive Rejection Sampling) \"\" (Inverse Transform), indicating sampling method tails. proposal_bounds numeric vector specifying left right bounds target density. cnum integer representing cache number created proposal memory. symmetric numeric scalar indicating symmetry point proposal, NULL symmetric. f_params list parameters target density proposal designed . is_symmetric logical value indicating whether proposal symmetric. proposal_type string indicating type generated proposal: \"scaled\" proposal \"scalable\" standardized rate = 1. used parameter rate either NULL provided. Scalable proposals compatible srexp. \"custom\" proposal \"custom\" rate provided. Custom proposals compatible srexp_custom. target_function_area numeric scalar estimating area target distribution. dens_func string containing hardcoded density function. density_name string specifying name target density distribution. lock identifier used saving loading proposal disk.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srexp_optimize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Optimizing Exponential Distribution proposal — srexp_optimize","text":"srexp_optimize() explicitly called: proposal created cached. parameters provided, standard proposal created rate = 1. Providing rate creates custom proposal, cached use srexp_custom(). optimization process can controlled via parameters steps, proposal_range, theta. parameters provided, proposal optimized via brute force based . target_sample_size.","code":""},{"path":[]},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srexp_optimize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimizing Exponential Distribution proposal — srexp_optimize","text":"","code":"# Generate scalable proposal that with rate = 1, that has 4096 steps scalable_proposal <- srexp_optimize(steps = 4096)  # Generate custom proposal that with rate = 4 scalable_proposal <- srexp_optimize(rate = 4)"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srgamma_custom.html","id":null,"dir":"Reference","previous_headings":"","what":"Sampling from Gamma Distribution — srgamma_custom","title":"Sampling from Gamma Distribution — srgamma_custom","text":"srgamma_custom() function generates random samples Gamma distribution using STORS algorithm. employs optimized proposal distribution around mode Adaptive Rejection Sampling (ARS) tails.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srgamma_custom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampling from Gamma Distribution — srgamma_custom","text":"","code":"srgamma_custom(n = 1, x = NULL)"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srgamma_custom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sampling from Gamma Distribution — srgamma_custom","text":"n Integer, length 1. Number samples draw. x (optional) Numeric vector length \\(n\\). provided, vector overwritten place avoid memory allocation.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srgamma_custom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sampling from Gamma Distribution — srgamma_custom","text":"numeric vector length n containing random samples Gamma distribution. shape rate parameters specified optimization process using srgamma_optimize(). NOTE: x parameter specified, updated -place simulation performance reasons.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srgamma_custom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sampling from Gamma Distribution — srgamma_custom","text":"Gamma Distribution Gamma distribution probability density function (PDF): $$f(x | \\alpha, \\beta) = \\frac{\\beta^\\alpha}{\\Gamma(\\alpha)} x^{\\alpha - 1} \\exp(-\\beta x), \\quad x \\geq 0,$$ : \\(\\alpha\\) shape parameter (\\(\\alpha > 0\\)), determines shape distribution. \\(\\beta\\) rate parameter (\\(\\beta > 0\\)), determines rate decay. Gamma distribution widely used statistics, particularly Bayesian inference modeling waiting times. function samples proposal constructed using srgamma_optimize, employing STORS algorithm. default, srgamma_custom() samples standard Gamma distribution shape = 1 rate = 1. proposal distribution pre-optimized package load time using srgamma_optimize() steps = 4091, creating scalable proposal centered around mode.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srgamma_custom.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Sampling from Gamma Distribution — srgamma_custom","text":"function scalable. Therefore, srgamma_custom() version available, requires proposal pre-optimized using srgamma_optimize() calling function.","code":""},{"path":[]},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srgamma_custom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sampling from Gamma Distribution — srgamma_custom","text":"","code":"# Generate 10 samples from Gamma Distribution samples <- srgamma_custom(10) print(samples) #>  [1] 1.65805311 1.36172745 0.75656008 1.68860720 0.16476132 0.07276094 #>  [7] 0.65406031 1.13923495 1.02253763 0.03844795  # Generate 10 samples using a pre-allocated vector x <- numeric(10) srgamma_custom(10, x = x) #>  [1] 0.58009123 0.71560359 0.55083941 1.50132598 0.64923423 1.00158908 #>  [7] 0.51345683 0.08734172 0.24703831 2.30155922 print(x) #>  [1] 0.58009123 0.71560359 0.55083941 1.50132598 0.64923423 1.00158908 #>  [7] 0.51345683 0.08734172 0.24703831 2.30155922"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srgamma_optimize.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimizing Gamma Distribution proposal — srgamma_optimize","title":"Optimizing Gamma Distribution proposal — srgamma_optimize","text":"srgamma_optimize() function generates optimized proposal targeted Gamma distribution. proposal can customized adjusted based various options provided user.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srgamma_optimize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizing Gamma Distribution proposal — srgamma_optimize","text":"","code":"srgamma_optimize(   shape = NULL,   rate = NULL,   scale = NULL,   xl = NULL,   xr = NULL,   steps = 4091,   proposal_range = NULL,   theta = 0.1,   target_sample_size = 1000,   verbose = FALSE )"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srgamma_optimize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimizing Gamma Distribution proposal — srgamma_optimize","text":"shape (optional) Numeric. shape parameter (\\(\\alpha\\)) Gamma distribution. Defaults 1. rate (optional) Numeric. rate parameter (\\(\\beta\\)) Gamma distribution. Defaults 1. scale (optional) Numeric. scale parameter Gamma distribution. Defaults 1. xl Numeric. Left truncation bound target distribution. Defaults 0, representing left truncation. xr Numeric. Right truncation bound target distribution. Defaults Inf, representing right truncation. steps (optional) Integer. Desired number steps proposal. Defaults 4091. proposal_range (optional) Numeric vector. Specifies range optimizing steps part proposal. Defaults NULL, indicating automatic range selection. theta Numeric. parameter proposal optimization. Defaults 0.1. target_sample_size (optional) Integer. Target sample size proposal optimization. Defaults 1000. verbose Boolean. TRUE, detailed optimization information, including areas steps, displayed. Defaults FALSE.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srgamma_optimize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimizing Gamma Distribution proposal — srgamma_optimize","text":"list containing optimized proposal related parameters specified Gamma distribution. proposal also cached internal use. data Detailed information proposal steps, including x, s_upper, p_a, s_upper_lower. areas areas left tail, steps, right tail proposal distribution. steps_number number steps proposal. f_params parameters (shape rate) Gamma distribution.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srgamma_optimize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Optimizing Gamma Distribution proposal — srgamma_optimize","text":"srgamma_optimize() explicitly called: proposal created cached. parameters provided, standard proposal created shape = 1 rate = 1. Providing shape rate creates custom proposal, cached use srgamma_custom(). optimization process can controlled via parameters steps, proposal_range, theta. parameters provided, proposal optimized via brute force based target_sample_size.","code":""},{"path":[]},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srgamma_optimize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimizing Gamma Distribution proposal — srgamma_optimize","text":"","code":"# Generate a standard proposal with shape = 1 and rate = 1 standard_proposal <- srgamma_optimize()  # Generate a custom proposal with shape = 2 and rate = 3 custom_proposal <- srgamma_optimize(shape = 2, rate = 3)"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srlaplace.html","id":null,"dir":"Reference","previous_headings":"","what":"Sampling from Laplace Distribution — srlaplace","title":"Sampling from Laplace Distribution — srlaplace","text":"srlaplace() function generates random samples Laplace Distribution using STORS algorithm. employs optimized proposal distribution around mode Inverse Transform () method tails.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srlaplace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampling from Laplace Distribution — srlaplace","text":"","code":"srlaplace(n = 1, mu = 0, b = 1, x = NULL)  srlaplace_custom(n = 1, x = NULL)"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srlaplace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sampling from Laplace Distribution — srlaplace","text":"n Integer, length 1. Number samples draw. mu Numeric, location parameter. b Numeric, scale parameter. x (optional) Numeric vector length \\(n\\). provided, vector written place avoid memory allocation.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srlaplace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sampling from Laplace Distribution — srlaplace","text":"numeric vector length n containing samples Laplace Distribution specified mu b. NOTE: x parameter specified, updated -place simulation performance reasons.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srlaplace.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sampling from Laplace Distribution — srlaplace","text":"Laplace distribution probability density function (PDF): \\(f(x | \\mu, b) = \\frac{1}{2b} \\exp\\left(-\\frac{|x - \\mu|}{b}\\right),\\) : \\(\\mu\\) location parameter (mean distribution). b scale parameter, controls spread distribution (b > 0). two functions sampling using STORS algorithm based proposal constructed using srlaplace_optimize. default, srlaplace() samples standard Laplace Distribution (mu = 0, b = 1). proposal distribution pre-optimized package load time using srlaplace_optimize() steps = 4091, creating scalable proposal centered around mode. srlaplace() called custom mu b parameters, samples generated standard Laplace Distribution, scaled location shifted accordingly.","code":""},{"path":[]},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srlaplace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sampling from Laplace Distribution — srlaplace","text":"","code":"# Generate 10 samples from the standard Laplace Distribution samples <- srlaplace(10) print(samples) #>  [1]  0.39249533  0.60530463  0.09591744 -0.03456204 -1.53470185 -0.86099449 #>  [7] -0.46050251  0.89540617  0.43713495  0.10473872  # Generate 10 samples using a pre-allocated vector x <- numeric(10) srlaplace(10, x = x) #>  [1] -0.8983517  1.7477538  1.2685887 -0.3130708 -0.4989779  2.0564950 #>  [7] -2.0936918  0.9701324 -1.9381092 -0.5529304 print(x) #>  [1] -0.8983517  1.7477538  1.2685887 -0.3130708 -0.4989779  2.0564950 #>  [7] -2.0936918  0.9701324 -1.9381092 -0.5529304  # Generate 10 samples from a Laplace Distribution with mu = 2 and b = 3 samples <- srlaplace(10, mu = 2, b = 3) print(samples) #>  [1] -0.45525639  3.32103371  0.02290107  0.07848027  1.39860396  3.87348082 #>  [7] -4.68729634 -1.00088479 -0.47076668  1.36480013"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srlaplace_optimize.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimizing Laplace Distribution proposal — srlaplace_optimize","title":"Optimizing Laplace Distribution proposal — srlaplace_optimize","text":"srlaplace_optimize() function generates optimized proposal targeted Laplace Distribution. proposal can customized adjusted based various options provided user.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srlaplace_optimize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizing Laplace Distribution proposal — srlaplace_optimize","text":"","code":"srlaplace_optimize(   mu = NULL,   b = NULL,   xl = NULL,   xr = NULL,   steps = 4091,   proposal_range = NULL,   theta = 0.1,   target_sample_size = 1000,   verbose = FALSE,   symmetric = FALSE )"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srlaplace_optimize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimizing Laplace Distribution proposal — srlaplace_optimize","text":"mu (optional) Numeric, location parameter. b (optional) Numeric, scale parameter. xl Numeric. Left truncation bound target distribution. Defaults -Inf, representing left truncation. xr Numeric. Right truncation bound target distribution. Defaults Inf, representing right truncation. steps (optional) Integer. Desired number steps proposal. Defaults NULL, means number steps determined automatically optimization. proposal_range (optional) Numeric vector. Specifies range optimizing steps part proposal. Defaults NULL, indicating automatic range selection. theta Numeric. parameter proposal optimization. Defaults 0.1. target_sample_size (optional) Integer. Target sample size proposal optimization. Defaults 1000. verbose Boolean. TRUE, detailed optimization information, including areas steps, displayed. Defaults FALSE. symmetric Boolean. TRUE, proposal target right tail distribution, reducing size cached proposal making sampling memory-efficient. additional uniform random number sampled determine sample's position relative mode distribution. improves memory efficiency, extra sampling may slightly impact performance, especially proposal efficiency close 1. Defaults FALSE.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srlaplace_optimize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimizing Laplace Distribution proposal — srlaplace_optimize","text":"user need store returned value, package internally cashes proposal. However, explain full returned proposal advanced users. list containing optimized proposal related parameters specified built-distribution: data data frame detailed information proposal steps, including: x start point step x-axis. s_upper height step y-axis. p_a Pre-acceptance probability step. s_upper_lower vector used scale uniform random number sample accepted. areas numeric vector containing areas : left_tail left tail bound. steps middle steps. right_tail right tail bound. steps_number integer specifying number steps proposal. sampling_probabilities numeric vector : left_tail probability sampling left tail. left_and_middle combined probability sampling left tail middle steps. unif_scaler numeric scalar, inverse probability sampling steps part proposal (\\(\\frac{1}{p(lower < x < upper)}\\)). Used scaling uniform random values. lt_properties numeric vector 5 values required Adaptive Rejection Sampling (ARS) left tail. rt_properties numeric vector 6 values required ARS right tail. alpha numeric scalar representing uniform step area. tails_method string, either \"ARS\" (Adaptive Rejection Sampling) \"\" (Inverse Transform), indicating sampling method tails. proposal_bounds numeric vector specifying left right bounds target density. cnum integer representing cache number created proposal memory. symmetric numeric scalar indicating symmetry point proposal, NULL symmetric. f_params list parameters target density proposal designed . is_symmetric logical value indicating whether proposal symmetric. proposal_type string indicating type generated proposal: \"scaled\" proposal \"scalable\" standardized mu = 0 b = 1. used parameters mu b either NULL provided. Scalable proposals compatible srlaplace. \"custom\" proposal \"custom\" either mu b provided. Custom proposals compatible srlaplace_custom. target_function_area numeric scalar estimating area target distribution. dens_func string containing hardcoded density function. density_name string specifying name target density distribution. lock identifier used saving loading proposal disk.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srlaplace_optimize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Optimizing Laplace Distribution proposal — srlaplace_optimize","text":"srlaplace_optimize() explicitly called: proposal created cached. parameters provided, standard proposal created (mu = 0, b = 1). Providing mu b creates custom proposal, cached use srlaplace_custom(). optimization process can controlled via parameters steps, proposal_range, theta. parameters provided, proposal optimized via brute force based . target_sample_size.","code":""},{"path":[]},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srlaplace_optimize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimizing Laplace Distribution proposal — srlaplace_optimize","text":"","code":"# Generate scalable proposal that with mu = 0 and b = 1, that has 4096 steps scalable_proposal <- srlaplace_optimize(steps = 4096)  # Generate custom proposal that with mu = 2 and b = 1 scalable_proposal <- srlaplace_optimize(mu = 2, b = 1)"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srnorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Sampling from Normal Distribution — srnorm","title":"Sampling from Normal Distribution — srnorm","text":"srnorm() function generates random samples Normal distribution using STORS algorithm. employs optimized proposal distribution around mode Adaptive Rejection Sampling (ARS) tails.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srnorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampling from Normal Distribution — srnorm","text":"","code":"srnorm(n = 1, mean = 0, sd = 1, x = NULL)  srnorm_custom(n = 1, x = NULL)"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srnorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sampling from Normal Distribution — srnorm","text":"n Integer, length 1. Number samples draw. mean Numeric. Mean parameter Normal distribution. sd Numeric. Standard deviation target Normal distribution. x (optional) Numeric vector length \\(n\\). provided, vector written place avoid memory allocation.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srnorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sampling from Normal Distribution — srnorm","text":"numeric vector length n containing samples Normal distribution specified mean sd. NOTE: x parameter specified, updated -place simulation performance reasons.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srnorm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sampling from Normal Distribution — srnorm","text":"Normal distribution probability density function (PDF): \\(f(x | \\mu, \\sigma) = \\frac{1}{\\sigma\\sqrt{2\\pi}} \\exp\\left(-\\frac{(x - \\mu)^2}{2\\sigma^2}\\right),\\) : \\(\\mu\\) mean distribution, determines center bell curve. \\(\\sigma\\) standard deviation, controls spread distribution (\\(\\sigma > 0\\)). two functions sampling using STORS algorithm based proposal constructed using srnorm_optimize. default, srnorm() samples standard Normal distribution (mean = 0, sd = 1). proposal distribution pre-optimized package load time using srnorm_optimize() steps = 4091, creating scalable proposal centered around mode. srnorm() called custom mean sd parameters, samples generated standard Normal distribution, scaled location shifted accordingly.","code":""},{"path":[]},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srnorm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sampling from Normal Distribution — srnorm","text":"","code":"# Generate 10 samples from the standard Normal distribution samples <- srnorm(10) print(samples) #>  [1]  1.82162188 -1.54503316  0.66665189 -0.18628797 -1.13132568 -0.04051822 #>  [7] -0.31578765 -0.54573070  1.19908447 -1.07421382  # Generate 10 samples using a pre-allocated vector x <- numeric(10) srnorm(10, x = x) #>  [1] -0.8836765  1.2722961 -0.8249442  1.4520775  0.3352823  1.1540284 #>  [7]  2.4333979 -0.6606458  0.3987386 -1.0249183 print(x) #>  [1] -0.8836765  1.2722961 -0.8249442  1.4520775  0.3352823  1.1540284 #>  [7]  2.4333979 -0.6606458  0.3987386 -1.0249183  # Generate 10 samples from a Normal distribution with mean = 2 and sd = 3 samples <- srnorm(10, mean = 2, sd = 3) print(samples) #>  [1]  2.0166136  4.7186473 -0.8259597  3.0032599  2.6041036  1.3932055 #>  [7]  4.7839186  3.1892148  0.3062024  3.6714986"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srnorm_optimize.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimizing Normal Distribution proposal — srnorm_optimize","title":"Optimizing Normal Distribution proposal — srnorm_optimize","text":"srnorm_optimize() function generates optimized proposal targeted Normal distribution. proposal can customized adjusted based various options provided user.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srnorm_optimize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizing Normal Distribution proposal — srnorm_optimize","text":"","code":"srnorm_optimize(   mean = NULL,   sd = NULL,   xl = -Inf,   xr = Inf,   steps = NULL,   proposal_range = NULL,   theta = 0.1,   target_sample_size = 1000,   verbose = FALSE,   symmetric = FALSE )"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srnorm_optimize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimizing Normal Distribution proposal — srnorm_optimize","text":"mean (optional) Numeric. Mean parameter Normal distribution. Defaults NULL, implies scalable proposal mean = 0. sd (optional) Numeric. Standard deviation target Normal distribution. Defaults NULL, implies scalable proposal sd = 1. xl Numeric. Left truncation bound target distribution. Defaults -Inf, representing left truncation. xr Numeric. Right truncation bound target distribution. Defaults Inf, representing right truncation. steps (optional) Integer. Desired number steps proposal. Defaults NULL, means number steps determined automatically optimization. proposal_range (optional) Numeric vector. Specifies range optimizing steps part proposal. Defaults NULL, indicating automatic range selection. theta Numeric. parameter proposal optimization. Defaults 0.1. target_sample_size (optional) Integer. Target sample size proposal optimization. Defaults 1000. verbose Boolean. TRUE, detailed optimization information, including areas steps, displayed. Defaults FALSE. symmetric Boolean. TRUE, proposal target right tail distribution, reducing size cached proposal making sampling memory-efficient. additional uniform random number sampled determine sample's position relative mode distribution. improves memory efficiency, extra sampling may slightly impact performance, especially proposal efficiency close 1. Defaults FALSE.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srnorm_optimize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimizing Normal Distribution proposal — srnorm_optimize","text":"user need store returned value, package internally cashes proposal. However, explain full returned proposal advanced users. list containing optimized proposal related parameters specified built-distribution: data data frame detailed information proposal steps, including: x start point step x-axis. s_upper height step y-axis. p_a Pre-acceptance probability step. s_upper_lower vector used scale uniform random number sample accepted. areas numeric vector containing areas : left_tail left tail bound. steps middle steps. right_tail right tail bound. steps_number integer specifying number steps proposal. sampling_probabilities numeric vector : left_tail probability sampling left tail. left_and_middle combined probability sampling left tail middle steps. unif_scaler numeric scalar, inverse probability sampling steps part proposal (\\(\\frac{1}{p(lower < x < upper)}\\)). Used scaling uniform random values. lt_properties numeric vector 5 values required Adaptive Rejection Sampling (ARS) left tail. rt_properties numeric vector 6 values required ARS right tail. alpha numeric scalar representing uniform step area. tails_method string, either \"ARS\" (Adaptive Rejection Sampling) \"\" (Inverse Transform), indicating sampling method tails. proposal_bounds numeric vector specifying left right bounds target density. cnum integer representing cache number created proposal memory. symmetric numeric scalar indicating symmetry point proposal, NULL symmetric. f_params list parameters target density proposal designed . is_symmetric logical value indicating whether proposal symmetric. proposal_type string indicating type generated proposal: \"scaled\" proposal \"scalable\" standardized mean = 0 sd = 1. used parameters mean sd either NULL provided. Scalable proposals compatible srnorm. \"custom\" proposal \"custom\" either mean sd provided. Custom proposals compatible srnorm_custom. target_function_area numeric scalar estimating area target distribution. dens_func string containing hardcoded density function. density_name string specifying name target density distribution. lock identifier used saving loading proposal disk.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srnorm_optimize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Optimizing Normal Distribution proposal — srnorm_optimize","text":"srnorm_optimize() explicitly called: proposal created cached. parameters provided, standard proposal created (mean = 0, sd = 1). Providing mean sd creates custom proposal, cached use srnorm_custom(). optimization process can controlled via parameters steps, proposal_range, theta. parameters provided, proposal optimized via brute force based . target_sample_size.","code":""},{"path":[]},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srnorm_optimize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimizing Normal Distribution proposal — srnorm_optimize","text":"","code":"# Generate scalable proposal that with mean = 0 and sd = 1, that has 4096 steps scalable_proposal <- srnorm_optimize(steps = 4096)   # Generate custom proposal that with mean = 2 and sd = 1 scalable_proposal <- srnorm_optimize(mean = 2, sd = 1)"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srpareto_custom.html","id":null,"dir":"Reference","previous_headings":"","what":"Sampling from Pareto Distribution — srpareto_custom","title":"Sampling from Pareto Distribution — srpareto_custom","text":"srpareto_custom() function generates random samples Pareto distribution using STORS algorithm. employs optimized proposal distribution around mode Inverse Transform () method tails.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srpareto_custom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampling from Pareto Distribution — srpareto_custom","text":"","code":"srpareto_custom(n = 1, x = NULL)"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srpareto_custom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sampling from Pareto Distribution — srpareto_custom","text":"n Integer, length 1. Number samples draw. x (optional) Numeric vector length \\(n\\). provided, vector overwritten place avoid memory allocation.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srpareto_custom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sampling from Pareto Distribution — srpareto_custom","text":"numeric vector length n containing random samples Pareto distribution. shape scale parameters specified optimization process using srpareto_optimize(). NOTE: x parameter specified, updated -place simulation performance reasons.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srpareto_custom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sampling from Pareto Distribution — srpareto_custom","text":"Pareto Distribution Pareto distribution probability density function (PDF): $$f(x | \\alpha, \\sigma) = \\frac{\\alpha \\sigma^\\alpha}{x^{\\alpha + 1}}, \\quad x \\geq \\sigma,$$ : \\(\\alpha\\) shape parameter (\\(\\alpha > 0\\)), determines tail heaviness distribution. \\(\\sigma\\) scale parameter (\\(\\sigma > 0\\)), determines minimum possible value \\(x\\). Pareto distribution widely used modeling phenomena heavy tails, wealth distribution, insurance losses, natural events. function samples proposal constructed using srpareto_optimize, employing STORS algorithm. default, srpareto_custom() samples standard Pareto distribution shape = 1 rate = 1. proposal distribution pre-optimized package load time using srpareto_optimize() steps = 4091, creating scalable proposal centered around mode.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srpareto_custom.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Sampling from Pareto Distribution — srpareto_custom","text":"function scalable. Therefore, srpareto_custom() version available, requires proposal pre-optimized using srpareto_optimize() calling function.","code":""},{"path":[]},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srpareto_custom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sampling from Pareto Distribution — srpareto_custom","text":"","code":"# Generate 10 samples from Pareto Distribution samples <- srpareto_custom(10) print(samples) #>  [1]  5.828007  5.718667  1.579449  2.950178  9.143724  7.614425  3.231416 #>  [8]  1.486259  2.116089 11.852458  # Generate 10 samples using a pre-allocated vector x <- numeric(10) srpareto_custom(10, x = x) #>  [1]   2.407341  11.485354   1.360647   4.017614   1.386229   5.900970 #>  [7]   7.771791  17.633048   3.145847 101.425371 print(x) #>  [1]   2.407341  11.485354   1.360647   4.017614   1.386229   5.900970 #>  [7]   7.771791  17.633048   3.145847 101.425371"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srpareto_optimize.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimizing Pareto Distribution proposal — srpareto_optimize","title":"Optimizing Pareto Distribution proposal — srpareto_optimize","text":"srpareto_optimize() function generates optimized proposal targeted Pareto Distribution. proposal can customized adjusted based various options provided user.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srpareto_optimize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizing Pareto Distribution proposal — srpareto_optimize","text":"","code":"srpareto_optimize(   scale = NULL,   shape = NULL,   xl = NULL,   xr = NULL,   steps = 4091,   proposal_range = NULL,   theta = 0.1,   target_sample_size = 1000,   verbose = FALSE )"},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srpareto_optimize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimizing Pareto Distribution proposal — srpareto_optimize","text":"scale (optional) Numeric. scale parameter Pareto Distribution. Defaults NULL, implies scalable proposal scale = 1. shape (optional) Numeric. shape parameter Pareto Distribution. Defaults NULL, implies scalable proposal shape = 1. xl Numeric. Left truncation bound target distribution. Defaults -Inf, representing left truncation. xr Numeric. Right truncation bound target distribution. Defaults Inf, representing right truncation. steps (optional) Integer. Desired number steps proposal. Defaults NULL, means number steps determined automatically optimization. proposal_range (optional) Numeric vector. Specifies range optimizing steps part proposal. Defaults NULL, indicating automatic range selection. theta Numeric. parameter proposal optimization. Defaults 0.1. target_sample_size (optional) Integer. Target sample size proposal optimization. Defaults 1000. verbose Boolean. TRUE, detailed optimization information, including areas steps, displayed. Defaults FALSE.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srpareto_optimize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimizing Pareto Distribution proposal — srpareto_optimize","text":"user need store returned value, package internally cashes proposal. However, explain full returned proposal advanced users. list containing optimized proposal related parameters specified built-distribution: #' data Detailed information proposal steps, including x, s_upper, p_a, s_upper_lower. areas areas left tail, steps, right tail proposal distribution. steps_number number steps proposal. f_params parameters (scale shape) Beta distribution.","code":""},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srpareto_optimize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Optimizing Pareto Distribution proposal — srpareto_optimize","text":"srpareto_optimize() explicitly called: proposal created cached. parameters provided, standard proposal created rate = 1. Providing rate creates custom proposal, cached use srpareto_custom(). optimization process can controlled via parameters steps, proposal_range, theta. parameters provided, proposal optimized via brute force based . target_sample_size.","code":""},{"path":[]},{"path":"https://ahmad-alqabandi.github.io/stors/reference/srpareto_optimize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimizing Pareto Distribution proposal — srpareto_optimize","text":"","code":"# Generate scalable proposal that with rate = 1, that has 4096 steps scalable_proposal <- srpareto_optimize(steps = 4096)  # Generate custom proposal that with scale = 4 scalable_proposal <- srpareto_optimize(scale = 4)"}]
